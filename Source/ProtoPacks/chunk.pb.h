// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ProtoPacks/chunk.proto

#ifndef PROTOBUF_ProtoPacks_2fchunk_2eproto__INCLUDED
#define PROTOBUF_ProtoPacks_2fchunk_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_ProtoPacks_2fchunk_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsChunkPackImpl();
void InitDefaultsChunkPack();
inline void InitDefaults() {
  InitDefaultsChunkPack();
}
}  // namespace protobuf_ProtoPacks_2fchunk_2eproto
class ChunkPack;
class ChunkPackDefaultTypeInternal;
extern ChunkPackDefaultTypeInternal _ChunkPack_default_instance_;

// ===================================================================

class ChunkPack : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ChunkPack) */ {
 public:
  ChunkPack();
  virtual ~ChunkPack();

  ChunkPack(const ChunkPack& from);

  inline ChunkPack& operator=(const ChunkPack& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ChunkPack(ChunkPack&& from) noexcept
    : ChunkPack() {
    *this = ::std::move(from);
  }

  inline ChunkPack& operator=(ChunkPack&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ChunkPack& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChunkPack* internal_default_instance() {
    return reinterpret_cast<const ChunkPack*>(
               &_ChunkPack_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(ChunkPack* other);
  friend void swap(ChunkPack& a, ChunkPack& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ChunkPack* New() const PROTOBUF_FINAL { return New(NULL); }

  ChunkPack* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ChunkPack& from);
  void MergeFrom(const ChunkPack& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ChunkPack* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes data = 1;
  void clear_data();
  static const int kDataFieldNumber = 1;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // int32 x = 2;
  void clear_x();
  static const int kXFieldNumber = 2;
  ::google::protobuf::int32 x() const;
  void set_x(::google::protobuf::int32 value);

  // int32 y = 3;
  void clear_y();
  static const int kYFieldNumber = 3;
  ::google::protobuf::int32 y() const;
  void set_y(::google::protobuf::int32 value);

  // int32 z = 4;
  void clear_z();
  static const int kZFieldNumber = 4;
  ::google::protobuf::int32 z() const;
  void set_z(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ChunkPack)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  ::google::protobuf::int32 x_;
  ::google::protobuf::int32 y_;
  ::google::protobuf::int32 z_;
  mutable int _cached_size_;
  friend struct ::protobuf_ProtoPacks_2fchunk_2eproto::TableStruct;
  friend void ::protobuf_ProtoPacks_2fchunk_2eproto::InitDefaultsChunkPackImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ChunkPack

// bytes data = 1;
inline void ChunkPack::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ChunkPack::data() const {
  // @@protoc_insertion_point(field_get:ChunkPack.data)
  return data_.GetNoArena();
}
inline void ChunkPack::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ChunkPack.data)
}
#if LANG_CXX11
inline void ChunkPack::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ChunkPack.data)
}
#endif
inline void ChunkPack::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ChunkPack.data)
}
inline void ChunkPack::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ChunkPack.data)
}
inline ::std::string* ChunkPack::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:ChunkPack.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ChunkPack::release_data() {
  // @@protoc_insertion_point(field_release:ChunkPack.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChunkPack::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:ChunkPack.data)
}

// int32 x = 2;
inline void ChunkPack::clear_x() {
  x_ = 0;
}
inline ::google::protobuf::int32 ChunkPack::x() const {
  // @@protoc_insertion_point(field_get:ChunkPack.x)
  return x_;
}
inline void ChunkPack::set_x(::google::protobuf::int32 value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:ChunkPack.x)
}

// int32 y = 3;
inline void ChunkPack::clear_y() {
  y_ = 0;
}
inline ::google::protobuf::int32 ChunkPack::y() const {
  // @@protoc_insertion_point(field_get:ChunkPack.y)
  return y_;
}
inline void ChunkPack::set_y(::google::protobuf::int32 value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:ChunkPack.y)
}

// int32 z = 4;
inline void ChunkPack::clear_z() {
  z_ = 0;
}
inline ::google::protobuf::int32 ChunkPack::z() const {
  // @@protoc_insertion_point(field_get:ChunkPack.z)
  return z_;
}
inline void ChunkPack::set_z(::google::protobuf::int32 value) {
  
  z_ = value;
  // @@protoc_insertion_point(field_set:ChunkPack.z)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ProtoPacks_2fchunk_2eproto__INCLUDED
