// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ProtoPacks/common.proto

#ifndef PROTOBUF_ProtoPacks_2fcommon_2eproto__INCLUDED
#define PROTOBUF_ProtoPacks_2fcommon_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3005001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace protobuf_ProtoPacks_2fcommon_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[16];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
void InitDefaultsClientFirstConfirmImpl();
void InitDefaultsClientFirstConfirm();
void InitDefaultsEntityPosImpl();
void InitDefaultsEntityPos();
void InitDefaultsPlayerBasicImpl();
void InitDefaultsPlayerBasic();
void InitDefaultsChunkPackImpl();
void InitDefaultsChunkPack();
void InitDefaultsChunkEntityPackImpl();
void InitDefaultsChunkEntityPack();
void InitDefaultsMainPlayerMoveCmdImpl();
void InitDefaultsMainPlayerMoveCmd();
void InitDefaultsMainPlayerJumpCmdImpl();
void InitDefaultsMainPlayerJumpCmd();
void InitDefaultsCmd_SpawnEntityInPsImpl();
void InitDefaultsCmd_SpawnEntityInPs();
void InitDefaultsRpl_SpawnEntityInPsImpl();
void InitDefaultsRpl_SpawnEntityInPs();
void InitDefaultsEntityPosUpdateImpl();
void InitDefaultsEntityPosUpdate();
void InitDefaultsPutBlockImpl();
void InitDefaultsPutBlock();
void InitDefaultsCmd_PutBlockInPsImpl();
void InitDefaultsCmd_PutBlockInPs();
void InitDefaultsRpl_PutBlockInPsImpl();
void InitDefaultsRpl_PutBlockInPs();
void InitDefaultsClientOperationFailedImpl();
void InitDefaultsClientOperationFailed();
void InitDefaultsClientOperationSuccImpl();
void InitDefaultsClientOperationSucc();
void InitDefaultsRemoveEntityImpl();
void InitDefaultsRemoveEntity();
inline void InitDefaults() {
  InitDefaultsClientFirstConfirm();
  InitDefaultsEntityPos();
  InitDefaultsPlayerBasic();
  InitDefaultsChunkPack();
  InitDefaultsChunkEntityPack();
  InitDefaultsMainPlayerMoveCmd();
  InitDefaultsMainPlayerJumpCmd();
  InitDefaultsCmd_SpawnEntityInPs();
  InitDefaultsRpl_SpawnEntityInPs();
  InitDefaultsEntityPosUpdate();
  InitDefaultsPutBlock();
  InitDefaultsCmd_PutBlockInPs();
  InitDefaultsRpl_PutBlockInPs();
  InitDefaultsClientOperationFailed();
  InitDefaultsClientOperationSucc();
  InitDefaultsRemoveEntity();
}
}  // namespace protobuf_ProtoPacks_2fcommon_2eproto
class ChunkEntityPack;
class ChunkEntityPackDefaultTypeInternal;
extern ChunkEntityPackDefaultTypeInternal _ChunkEntityPack_default_instance_;
class ChunkPack;
class ChunkPackDefaultTypeInternal;
extern ChunkPackDefaultTypeInternal _ChunkPack_default_instance_;
class ClientFirstConfirm;
class ClientFirstConfirmDefaultTypeInternal;
extern ClientFirstConfirmDefaultTypeInternal _ClientFirstConfirm_default_instance_;
class ClientOperationFailed;
class ClientOperationFailedDefaultTypeInternal;
extern ClientOperationFailedDefaultTypeInternal _ClientOperationFailed_default_instance_;
class ClientOperationSucc;
class ClientOperationSuccDefaultTypeInternal;
extern ClientOperationSuccDefaultTypeInternal _ClientOperationSucc_default_instance_;
class Cmd_PutBlockInPs;
class Cmd_PutBlockInPsDefaultTypeInternal;
extern Cmd_PutBlockInPsDefaultTypeInternal _Cmd_PutBlockInPs_default_instance_;
class Cmd_SpawnEntityInPs;
class Cmd_SpawnEntityInPsDefaultTypeInternal;
extern Cmd_SpawnEntityInPsDefaultTypeInternal _Cmd_SpawnEntityInPs_default_instance_;
class EntityPos;
class EntityPosDefaultTypeInternal;
extern EntityPosDefaultTypeInternal _EntityPos_default_instance_;
class EntityPosUpdate;
class EntityPosUpdateDefaultTypeInternal;
extern EntityPosUpdateDefaultTypeInternal _EntityPosUpdate_default_instance_;
class MainPlayerJumpCmd;
class MainPlayerJumpCmdDefaultTypeInternal;
extern MainPlayerJumpCmdDefaultTypeInternal _MainPlayerJumpCmd_default_instance_;
class MainPlayerMoveCmd;
class MainPlayerMoveCmdDefaultTypeInternal;
extern MainPlayerMoveCmdDefaultTypeInternal _MainPlayerMoveCmd_default_instance_;
class PlayerBasic;
class PlayerBasicDefaultTypeInternal;
extern PlayerBasicDefaultTypeInternal _PlayerBasic_default_instance_;
class PutBlock;
class PutBlockDefaultTypeInternal;
extern PutBlockDefaultTypeInternal _PutBlock_default_instance_;
class RemoveEntity;
class RemoveEntityDefaultTypeInternal;
extern RemoveEntityDefaultTypeInternal _RemoveEntity_default_instance_;
class Rpl_PutBlockInPs;
class Rpl_PutBlockInPsDefaultTypeInternal;
extern Rpl_PutBlockInPsDefaultTypeInternal _Rpl_PutBlockInPs_default_instance_;
class Rpl_SpawnEntityInPs;
class Rpl_SpawnEntityInPsDefaultTypeInternal;
extern Rpl_SpawnEntityInPsDefaultTypeInternal _Rpl_SpawnEntityInPs_default_instance_;

enum ClientType {
  ClientType_GameServer = 0,
  ClientType_Player = 1,
  ClientType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  ClientType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool ClientType_IsValid(int value);
const ClientType ClientType_MIN = ClientType_GameServer;
const ClientType ClientType_MAX = ClientType_Player;
const int ClientType_ARRAYSIZE = ClientType_MAX + 1;

const ::google::protobuf::EnumDescriptor* ClientType_descriptor();
inline const ::std::string& ClientType_Name(ClientType value) {
  return ::google::protobuf::internal::NameOfEnum(
    ClientType_descriptor(), value);
}
inline bool ClientType_Parse(
    const ::std::string& name, ClientType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<ClientType>(
    ClientType_descriptor(), name, value);
}
enum EntityType {
  T_Null = 0,
  T_Player = 1,
  EntityType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  EntityType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool EntityType_IsValid(int value);
const EntityType EntityType_MIN = T_Null;
const EntityType EntityType_MAX = T_Player;
const int EntityType_ARRAYSIZE = EntityType_MAX + 1;

const ::google::protobuf::EnumDescriptor* EntityType_descriptor();
inline const ::std::string& EntityType_Name(EntityType value) {
  return ::google::protobuf::internal::NameOfEnum(
    EntityType_descriptor(), value);
}
inline bool EntityType_Parse(
    const ::std::string& name, EntityType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<EntityType>(
    EntityType_descriptor(), name, value);
}
enum RemoveEntityType {
  killed = 0,
  disco = 1,
  clear = 2,
  RemoveEntityType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  RemoveEntityType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool RemoveEntityType_IsValid(int value);
const RemoveEntityType RemoveEntityType_MIN = killed;
const RemoveEntityType RemoveEntityType_MAX = clear;
const int RemoveEntityType_ARRAYSIZE = RemoveEntityType_MAX + 1;

const ::google::protobuf::EnumDescriptor* RemoveEntityType_descriptor();
inline const ::std::string& RemoveEntityType_Name(RemoveEntityType value) {
  return ::google::protobuf::internal::NameOfEnum(
    RemoveEntityType_descriptor(), value);
}
inline bool RemoveEntityType_Parse(
    const ::std::string& name, RemoveEntityType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<RemoveEntityType>(
    RemoveEntityType_descriptor(), name, value);
}
// ===================================================================

class ClientFirstConfirm : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ClientFirstConfirm) */ {
 public:
  ClientFirstConfirm();
  virtual ~ClientFirstConfirm();

  ClientFirstConfirm(const ClientFirstConfirm& from);

  inline ClientFirstConfirm& operator=(const ClientFirstConfirm& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ClientFirstConfirm(ClientFirstConfirm&& from) noexcept
    : ClientFirstConfirm() {
    *this = ::std::move(from);
  }

  inline ClientFirstConfirm& operator=(ClientFirstConfirm&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ClientFirstConfirm& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClientFirstConfirm* internal_default_instance() {
    return reinterpret_cast<const ClientFirstConfirm*>(
               &_ClientFirstConfirm_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(ClientFirstConfirm* other);
  friend void swap(ClientFirstConfirm& a, ClientFirstConfirm& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ClientFirstConfirm* New() const PROTOBUF_FINAL { return New(NULL); }

  ClientFirstConfirm* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ClientFirstConfirm& from);
  void MergeFrom(const ClientFirstConfirm& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ClientFirstConfirm* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .ClientType client_type = 1;
  void clear_client_type();
  static const int kClientTypeFieldNumber = 1;
  ::ClientType client_type() const;
  void set_client_type(::ClientType value);

  // @@protoc_insertion_point(class_scope:ClientFirstConfirm)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  int client_type_;
  mutable int _cached_size_;
  friend struct ::protobuf_ProtoPacks_2fcommon_2eproto::TableStruct;
  friend void ::protobuf_ProtoPacks_2fcommon_2eproto::InitDefaultsClientFirstConfirmImpl();
};
// -------------------------------------------------------------------

class EntityPos : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:EntityPos) */ {
 public:
  EntityPos();
  virtual ~EntityPos();

  EntityPos(const EntityPos& from);

  inline EntityPos& operator=(const EntityPos& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  EntityPos(EntityPos&& from) noexcept
    : EntityPos() {
    *this = ::std::move(from);
  }

  inline EntityPos& operator=(EntityPos&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const EntityPos& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EntityPos* internal_default_instance() {
    return reinterpret_cast<const EntityPos*>(
               &_EntityPos_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(EntityPos* other);
  friend void swap(EntityPos& a, EntityPos& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EntityPos* New() const PROTOBUF_FINAL { return New(NULL); }

  EntityPos* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const EntityPos& from);
  void MergeFrom(const EntityPos& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(EntityPos* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .EntityType t = 1;
  void clear_t();
  static const int kTFieldNumber = 1;
  ::EntityType t() const;
  void set_t(::EntityType value);

  // uint32 entity_id = 2;
  void clear_entity_id();
  static const int kEntityIdFieldNumber = 2;
  ::google::protobuf::uint32 entity_id() const;
  void set_entity_id(::google::protobuf::uint32 value);

  // float x = 3;
  void clear_x();
  static const int kXFieldNumber = 3;
  float x() const;
  void set_x(float value);

  // float y = 4;
  void clear_y();
  static const int kYFieldNumber = 4;
  float y() const;
  void set_y(float value);

  // float z = 5;
  void clear_z();
  static const int kZFieldNumber = 5;
  float z() const;
  void set_z(float value);

  // float r_roll = 6;
  void clear_r_roll();
  static const int kRRollFieldNumber = 6;
  float r_roll() const;
  void set_r_roll(float value);

  // float r_yaw = 7;
  void clear_r_yaw();
  static const int kRYawFieldNumber = 7;
  float r_yaw() const;
  void set_r_yaw(float value);

  // float r_pitch = 8;
  void clear_r_pitch();
  static const int kRPitchFieldNumber = 8;
  float r_pitch() const;
  void set_r_pitch(float value);

  // float vx = 9;
  void clear_vx();
  static const int kVxFieldNumber = 9;
  float vx() const;
  void set_vx(float value);

  // float vy = 10;
  void clear_vy();
  static const int kVyFieldNumber = 10;
  float vy() const;
  void set_vy(float value);

  // float vz = 11;
  void clear_vz();
  static const int kVzFieldNumber = 11;
  float vz() const;
  void set_vz(float value);

  // @@protoc_insertion_point(class_scope:EntityPos)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  int t_;
  ::google::protobuf::uint32 entity_id_;
  float x_;
  float y_;
  float z_;
  float r_roll_;
  float r_yaw_;
  float r_pitch_;
  float vx_;
  float vy_;
  float vz_;
  mutable int _cached_size_;
  friend struct ::protobuf_ProtoPacks_2fcommon_2eproto::TableStruct;
  friend void ::protobuf_ProtoPacks_2fcommon_2eproto::InitDefaultsEntityPosImpl();
};
// -------------------------------------------------------------------

class PlayerBasic : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:PlayerBasic) */ {
 public:
  PlayerBasic();
  virtual ~PlayerBasic();

  PlayerBasic(const PlayerBasic& from);

  inline PlayerBasic& operator=(const PlayerBasic& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PlayerBasic(PlayerBasic&& from) noexcept
    : PlayerBasic() {
    *this = ::std::move(from);
  }

  inline PlayerBasic& operator=(PlayerBasic&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerBasic& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PlayerBasic* internal_default_instance() {
    return reinterpret_cast<const PlayerBasic*>(
               &_PlayerBasic_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(PlayerBasic* other);
  friend void swap(PlayerBasic& a, PlayerBasic& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PlayerBasic* New() const PROTOBUF_FINAL { return New(NULL); }

  PlayerBasic* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PlayerBasic& from);
  void MergeFrom(const PlayerBasic& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PlayerBasic* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 entity_id = 1;
  void clear_entity_id();
  static const int kEntityIdFieldNumber = 1;
  ::google::protobuf::uint32 entity_id() const;
  void set_entity_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:PlayerBasic)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 entity_id_;
  mutable int _cached_size_;
  friend struct ::protobuf_ProtoPacks_2fcommon_2eproto::TableStruct;
  friend void ::protobuf_ProtoPacks_2fcommon_2eproto::InitDefaultsPlayerBasicImpl();
};
// -------------------------------------------------------------------

class ChunkPack : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ChunkPack) */ {
 public:
  ChunkPack();
  virtual ~ChunkPack();

  ChunkPack(const ChunkPack& from);

  inline ChunkPack& operator=(const ChunkPack& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ChunkPack(ChunkPack&& from) noexcept
    : ChunkPack() {
    *this = ::std::move(from);
  }

  inline ChunkPack& operator=(ChunkPack&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ChunkPack& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChunkPack* internal_default_instance() {
    return reinterpret_cast<const ChunkPack*>(
               &_ChunkPack_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(ChunkPack* other);
  friend void swap(ChunkPack& a, ChunkPack& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ChunkPack* New() const PROTOBUF_FINAL { return New(NULL); }

  ChunkPack* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ChunkPack& from);
  void MergeFrom(const ChunkPack& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ChunkPack* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes data = 1;
  void clear_data();
  static const int kDataFieldNumber = 1;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const void* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // int32 x = 2;
  void clear_x();
  static const int kXFieldNumber = 2;
  ::google::protobuf::int32 x() const;
  void set_x(::google::protobuf::int32 value);

  // int32 y = 3;
  void clear_y();
  static const int kYFieldNumber = 3;
  ::google::protobuf::int32 y() const;
  void set_y(::google::protobuf::int32 value);

  // int32 z = 4;
  void clear_z();
  static const int kZFieldNumber = 4;
  ::google::protobuf::int32 z() const;
  void set_z(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ChunkPack)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  ::google::protobuf::int32 x_;
  ::google::protobuf::int32 y_;
  ::google::protobuf::int32 z_;
  mutable int _cached_size_;
  friend struct ::protobuf_ProtoPacks_2fcommon_2eproto::TableStruct;
  friend void ::protobuf_ProtoPacks_2fcommon_2eproto::InitDefaultsChunkPackImpl();
};
// -------------------------------------------------------------------

class ChunkEntityPack : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ChunkEntityPack) */ {
 public:
  ChunkEntityPack();
  virtual ~ChunkEntityPack();

  ChunkEntityPack(const ChunkEntityPack& from);

  inline ChunkEntityPack& operator=(const ChunkEntityPack& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ChunkEntityPack(ChunkEntityPack&& from) noexcept
    : ChunkEntityPack() {
    *this = ::std::move(from);
  }

  inline ChunkEntityPack& operator=(ChunkEntityPack&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ChunkEntityPack& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ChunkEntityPack* internal_default_instance() {
    return reinterpret_cast<const ChunkEntityPack*>(
               &_ChunkEntityPack_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(ChunkEntityPack* other);
  friend void swap(ChunkEntityPack& a, ChunkEntityPack& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ChunkEntityPack* New() const PROTOBUF_FINAL { return New(NULL); }

  ChunkEntityPack* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ChunkEntityPack& from);
  void MergeFrom(const ChunkEntityPack& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ChunkEntityPack* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .EntityPos entity_pos = 1;
  int entity_pos_size() const;
  void clear_entity_pos();
  static const int kEntityPosFieldNumber = 1;
  const ::EntityPos& entity_pos(int index) const;
  ::EntityPos* mutable_entity_pos(int index);
  ::EntityPos* add_entity_pos();
  ::google::protobuf::RepeatedPtrField< ::EntityPos >*
      mutable_entity_pos();
  const ::google::protobuf::RepeatedPtrField< ::EntityPos >&
      entity_pos() const;

  // int32 x = 2;
  void clear_x();
  static const int kXFieldNumber = 2;
  ::google::protobuf::int32 x() const;
  void set_x(::google::protobuf::int32 value);

  // int32 y = 3;
  void clear_y();
  static const int kYFieldNumber = 3;
  ::google::protobuf::int32 y() const;
  void set_y(::google::protobuf::int32 value);

  // int32 z = 4;
  void clear_z();
  static const int kZFieldNumber = 4;
  ::google::protobuf::int32 z() const;
  void set_z(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ChunkEntityPack)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::EntityPos > entity_pos_;
  ::google::protobuf::int32 x_;
  ::google::protobuf::int32 y_;
  ::google::protobuf::int32 z_;
  mutable int _cached_size_;
  friend struct ::protobuf_ProtoPacks_2fcommon_2eproto::TableStruct;
  friend void ::protobuf_ProtoPacks_2fcommon_2eproto::InitDefaultsChunkEntityPackImpl();
};
// -------------------------------------------------------------------

class MainPlayerMoveCmd : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:MainPlayerMoveCmd) */ {
 public:
  MainPlayerMoveCmd();
  virtual ~MainPlayerMoveCmd();

  MainPlayerMoveCmd(const MainPlayerMoveCmd& from);

  inline MainPlayerMoveCmd& operator=(const MainPlayerMoveCmd& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MainPlayerMoveCmd(MainPlayerMoveCmd&& from) noexcept
    : MainPlayerMoveCmd() {
    *this = ::std::move(from);
  }

  inline MainPlayerMoveCmd& operator=(MainPlayerMoveCmd&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const MainPlayerMoveCmd& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MainPlayerMoveCmd* internal_default_instance() {
    return reinterpret_cast<const MainPlayerMoveCmd*>(
               &_MainPlayerMoveCmd_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(MainPlayerMoveCmd* other);
  friend void swap(MainPlayerMoveCmd& a, MainPlayerMoveCmd& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MainPlayerMoveCmd* New() const PROTOBUF_FINAL { return New(NULL); }

  MainPlayerMoveCmd* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const MainPlayerMoveCmd& from);
  void MergeFrom(const MainPlayerMoveCmd& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(MainPlayerMoveCmd* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 entity_id = 1;
  void clear_entity_id();
  static const int kEntityIdFieldNumber = 1;
  ::google::protobuf::uint32 entity_id() const;
  void set_entity_id(::google::protobuf::uint32 value);

  // float move_forward = 2;
  void clear_move_forward();
  static const int kMoveForwardFieldNumber = 2;
  float move_forward() const;
  void set_move_forward(float value);

  // float move_right = 3;
  void clear_move_right();
  static const int kMoveRightFieldNumber = 3;
  float move_right() const;
  void set_move_right(float value);

  // float rotate_yaw = 4;
  void clear_rotate_yaw();
  static const int kRotateYawFieldNumber = 4;
  float rotate_yaw() const;
  void set_rotate_yaw(float value);

  // @@protoc_insertion_point(class_scope:MainPlayerMoveCmd)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 entity_id_;
  float move_forward_;
  float move_right_;
  float rotate_yaw_;
  mutable int _cached_size_;
  friend struct ::protobuf_ProtoPacks_2fcommon_2eproto::TableStruct;
  friend void ::protobuf_ProtoPacks_2fcommon_2eproto::InitDefaultsMainPlayerMoveCmdImpl();
};
// -------------------------------------------------------------------

class MainPlayerJumpCmd : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:MainPlayerJumpCmd) */ {
 public:
  MainPlayerJumpCmd();
  virtual ~MainPlayerJumpCmd();

  MainPlayerJumpCmd(const MainPlayerJumpCmd& from);

  inline MainPlayerJumpCmd& operator=(const MainPlayerJumpCmd& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  MainPlayerJumpCmd(MainPlayerJumpCmd&& from) noexcept
    : MainPlayerJumpCmd() {
    *this = ::std::move(from);
  }

  inline MainPlayerJumpCmd& operator=(MainPlayerJumpCmd&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const MainPlayerJumpCmd& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MainPlayerJumpCmd* internal_default_instance() {
    return reinterpret_cast<const MainPlayerJumpCmd*>(
               &_MainPlayerJumpCmd_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(MainPlayerJumpCmd* other);
  friend void swap(MainPlayerJumpCmd& a, MainPlayerJumpCmd& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline MainPlayerJumpCmd* New() const PROTOBUF_FINAL { return New(NULL); }

  MainPlayerJumpCmd* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const MainPlayerJumpCmd& from);
  void MergeFrom(const MainPlayerJumpCmd& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(MainPlayerJumpCmd* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 start_or_end = 1;
  void clear_start_or_end();
  static const int kStartOrEndFieldNumber = 1;
  ::google::protobuf::uint32 start_or_end() const;
  void set_start_or_end(::google::protobuf::uint32 value);

  // uint32 entity_id = 2;
  void clear_entity_id();
  static const int kEntityIdFieldNumber = 2;
  ::google::protobuf::uint32 entity_id() const;
  void set_entity_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:MainPlayerJumpCmd)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 start_or_end_;
  ::google::protobuf::uint32 entity_id_;
  mutable int _cached_size_;
  friend struct ::protobuf_ProtoPacks_2fcommon_2eproto::TableStruct;
  friend void ::protobuf_ProtoPacks_2fcommon_2eproto::InitDefaultsMainPlayerJumpCmdImpl();
};
// -------------------------------------------------------------------

class Cmd_SpawnEntityInPs : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Cmd_SpawnEntityInPs) */ {
 public:
  Cmd_SpawnEntityInPs();
  virtual ~Cmd_SpawnEntityInPs();

  Cmd_SpawnEntityInPs(const Cmd_SpawnEntityInPs& from);

  inline Cmd_SpawnEntityInPs& operator=(const Cmd_SpawnEntityInPs& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Cmd_SpawnEntityInPs(Cmd_SpawnEntityInPs&& from) noexcept
    : Cmd_SpawnEntityInPs() {
    *this = ::std::move(from);
  }

  inline Cmd_SpawnEntityInPs& operator=(Cmd_SpawnEntityInPs&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Cmd_SpawnEntityInPs& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Cmd_SpawnEntityInPs* internal_default_instance() {
    return reinterpret_cast<const Cmd_SpawnEntityInPs*>(
               &_Cmd_SpawnEntityInPs_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    7;

  void Swap(Cmd_SpawnEntityInPs* other);
  friend void swap(Cmd_SpawnEntityInPs& a, Cmd_SpawnEntityInPs& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Cmd_SpawnEntityInPs* New() const PROTOBUF_FINAL { return New(NULL); }

  Cmd_SpawnEntityInPs* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Cmd_SpawnEntityInPs& from);
  void MergeFrom(const Cmd_SpawnEntityInPs& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Cmd_SpawnEntityInPs* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .EntityPos entity_pos = 2;
  bool has_entity_pos() const;
  void clear_entity_pos();
  static const int kEntityPosFieldNumber = 2;
  const ::EntityPos& entity_pos() const;
  ::EntityPos* release_entity_pos();
  ::EntityPos* mutable_entity_pos();
  void set_allocated_entity_pos(::EntityPos* entity_pos);

  // uint32 task_id = 1;
  void clear_task_id();
  static const int kTaskIdFieldNumber = 1;
  ::google::protobuf::uint32 task_id() const;
  void set_task_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Cmd_SpawnEntityInPs)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::EntityPos* entity_pos_;
  ::google::protobuf::uint32 task_id_;
  mutable int _cached_size_;
  friend struct ::protobuf_ProtoPacks_2fcommon_2eproto::TableStruct;
  friend void ::protobuf_ProtoPacks_2fcommon_2eproto::InitDefaultsCmd_SpawnEntityInPsImpl();
};
// -------------------------------------------------------------------

class Rpl_SpawnEntityInPs : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Rpl_SpawnEntityInPs) */ {
 public:
  Rpl_SpawnEntityInPs();
  virtual ~Rpl_SpawnEntityInPs();

  Rpl_SpawnEntityInPs(const Rpl_SpawnEntityInPs& from);

  inline Rpl_SpawnEntityInPs& operator=(const Rpl_SpawnEntityInPs& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Rpl_SpawnEntityInPs(Rpl_SpawnEntityInPs&& from) noexcept
    : Rpl_SpawnEntityInPs() {
    *this = ::std::move(from);
  }

  inline Rpl_SpawnEntityInPs& operator=(Rpl_SpawnEntityInPs&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Rpl_SpawnEntityInPs& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Rpl_SpawnEntityInPs* internal_default_instance() {
    return reinterpret_cast<const Rpl_SpawnEntityInPs*>(
               &_Rpl_SpawnEntityInPs_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void Swap(Rpl_SpawnEntityInPs* other);
  friend void swap(Rpl_SpawnEntityInPs& a, Rpl_SpawnEntityInPs& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Rpl_SpawnEntityInPs* New() const PROTOBUF_FINAL { return New(NULL); }

  Rpl_SpawnEntityInPs* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Rpl_SpawnEntityInPs& from);
  void MergeFrom(const Rpl_SpawnEntityInPs& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Rpl_SpawnEntityInPs* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .EntityPos entity_pos = 2;
  bool has_entity_pos() const;
  void clear_entity_pos();
  static const int kEntityPosFieldNumber = 2;
  const ::EntityPos& entity_pos() const;
  ::EntityPos* release_entity_pos();
  ::EntityPos* mutable_entity_pos();
  void set_allocated_entity_pos(::EntityPos* entity_pos);

  // uint32 task_id = 1;
  void clear_task_id();
  static const int kTaskIdFieldNumber = 1;
  ::google::protobuf::uint32 task_id() const;
  void set_task_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Rpl_SpawnEntityInPs)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::EntityPos* entity_pos_;
  ::google::protobuf::uint32 task_id_;
  mutable int _cached_size_;
  friend struct ::protobuf_ProtoPacks_2fcommon_2eproto::TableStruct;
  friend void ::protobuf_ProtoPacks_2fcommon_2eproto::InitDefaultsRpl_SpawnEntityInPsImpl();
};
// -------------------------------------------------------------------

class EntityPosUpdate : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:EntityPosUpdate) */ {
 public:
  EntityPosUpdate();
  virtual ~EntityPosUpdate();

  EntityPosUpdate(const EntityPosUpdate& from);

  inline EntityPosUpdate& operator=(const EntityPosUpdate& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  EntityPosUpdate(EntityPosUpdate&& from) noexcept
    : EntityPosUpdate() {
    *this = ::std::move(from);
  }

  inline EntityPosUpdate& operator=(EntityPosUpdate&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const EntityPosUpdate& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const EntityPosUpdate* internal_default_instance() {
    return reinterpret_cast<const EntityPosUpdate*>(
               &_EntityPosUpdate_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    9;

  void Swap(EntityPosUpdate* other);
  friend void swap(EntityPosUpdate& a, EntityPosUpdate& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline EntityPosUpdate* New() const PROTOBUF_FINAL { return New(NULL); }

  EntityPosUpdate* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const EntityPosUpdate& from);
  void MergeFrom(const EntityPosUpdate& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(EntityPosUpdate* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .EntityPos entity_pos = 1;
  int entity_pos_size() const;
  void clear_entity_pos();
  static const int kEntityPosFieldNumber = 1;
  const ::EntityPos& entity_pos(int index) const;
  ::EntityPos* mutable_entity_pos(int index);
  ::EntityPos* add_entity_pos();
  ::google::protobuf::RepeatedPtrField< ::EntityPos >*
      mutable_entity_pos();
  const ::google::protobuf::RepeatedPtrField< ::EntityPos >&
      entity_pos() const;

  // @@protoc_insertion_point(class_scope:EntityPosUpdate)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::EntityPos > entity_pos_;
  mutable int _cached_size_;
  friend struct ::protobuf_ProtoPacks_2fcommon_2eproto::TableStruct;
  friend void ::protobuf_ProtoPacks_2fcommon_2eproto::InitDefaultsEntityPosUpdateImpl();
};
// -------------------------------------------------------------------

class PutBlock : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:PutBlock) */ {
 public:
  PutBlock();
  virtual ~PutBlock();

  PutBlock(const PutBlock& from);

  inline PutBlock& operator=(const PutBlock& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PutBlock(PutBlock&& from) noexcept
    : PutBlock() {
    *this = ::std::move(from);
  }

  inline PutBlock& operator=(PutBlock&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PutBlock& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const PutBlock* internal_default_instance() {
    return reinterpret_cast<const PutBlock*>(
               &_PutBlock_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    10;

  void Swap(PutBlock* other);
  friend void swap(PutBlock& a, PutBlock& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PutBlock* New() const PROTOBUF_FINAL { return New(NULL); }

  PutBlock* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PutBlock& from);
  void MergeFrom(const PutBlock& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PutBlock* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 x = 1;
  void clear_x();
  static const int kXFieldNumber = 1;
  ::google::protobuf::int32 x() const;
  void set_x(::google::protobuf::int32 value);

  // int32 y = 2;
  void clear_y();
  static const int kYFieldNumber = 2;
  ::google::protobuf::int32 y() const;
  void set_y(::google::protobuf::int32 value);

  // int32 z = 3;
  void clear_z();
  static const int kZFieldNumber = 3;
  ::google::protobuf::int32 z() const;
  void set_z(::google::protobuf::int32 value);

  // int32 block_id = 4;
  void clear_block_id();
  static const int kBlockIdFieldNumber = 4;
  ::google::protobuf::int32 block_id() const;
  void set_block_id(::google::protobuf::int32 value);

  // uint32 operation_id = 5;
  void clear_operation_id();
  static const int kOperationIdFieldNumber = 5;
  ::google::protobuf::uint32 operation_id() const;
  void set_operation_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:PutBlock)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 x_;
  ::google::protobuf::int32 y_;
  ::google::protobuf::int32 z_;
  ::google::protobuf::int32 block_id_;
  ::google::protobuf::uint32 operation_id_;
  mutable int _cached_size_;
  friend struct ::protobuf_ProtoPacks_2fcommon_2eproto::TableStruct;
  friend void ::protobuf_ProtoPacks_2fcommon_2eproto::InitDefaultsPutBlockImpl();
};
// -------------------------------------------------------------------

class Cmd_PutBlockInPs : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Cmd_PutBlockInPs) */ {
 public:
  Cmd_PutBlockInPs();
  virtual ~Cmd_PutBlockInPs();

  Cmd_PutBlockInPs(const Cmd_PutBlockInPs& from);

  inline Cmd_PutBlockInPs& operator=(const Cmd_PutBlockInPs& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Cmd_PutBlockInPs(Cmd_PutBlockInPs&& from) noexcept
    : Cmd_PutBlockInPs() {
    *this = ::std::move(from);
  }

  inline Cmd_PutBlockInPs& operator=(Cmd_PutBlockInPs&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Cmd_PutBlockInPs& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Cmd_PutBlockInPs* internal_default_instance() {
    return reinterpret_cast<const Cmd_PutBlockInPs*>(
               &_Cmd_PutBlockInPs_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    11;

  void Swap(Cmd_PutBlockInPs* other);
  friend void swap(Cmd_PutBlockInPs& a, Cmd_PutBlockInPs& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Cmd_PutBlockInPs* New() const PROTOBUF_FINAL { return New(NULL); }

  Cmd_PutBlockInPs* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Cmd_PutBlockInPs& from);
  void MergeFrom(const Cmd_PutBlockInPs& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Cmd_PutBlockInPs* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .PutBlock put_block = 2;
  bool has_put_block() const;
  void clear_put_block();
  static const int kPutBlockFieldNumber = 2;
  const ::PutBlock& put_block() const;
  ::PutBlock* release_put_block();
  ::PutBlock* mutable_put_block();
  void set_allocated_put_block(::PutBlock* put_block);

  // uint32 task_id = 1;
  void clear_task_id();
  static const int kTaskIdFieldNumber = 1;
  ::google::protobuf::uint32 task_id() const;
  void set_task_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Cmd_PutBlockInPs)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::PutBlock* put_block_;
  ::google::protobuf::uint32 task_id_;
  mutable int _cached_size_;
  friend struct ::protobuf_ProtoPacks_2fcommon_2eproto::TableStruct;
  friend void ::protobuf_ProtoPacks_2fcommon_2eproto::InitDefaultsCmd_PutBlockInPsImpl();
};
// -------------------------------------------------------------------

class Rpl_PutBlockInPs : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:Rpl_PutBlockInPs) */ {
 public:
  Rpl_PutBlockInPs();
  virtual ~Rpl_PutBlockInPs();

  Rpl_PutBlockInPs(const Rpl_PutBlockInPs& from);

  inline Rpl_PutBlockInPs& operator=(const Rpl_PutBlockInPs& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Rpl_PutBlockInPs(Rpl_PutBlockInPs&& from) noexcept
    : Rpl_PutBlockInPs() {
    *this = ::std::move(from);
  }

  inline Rpl_PutBlockInPs& operator=(Rpl_PutBlockInPs&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Rpl_PutBlockInPs& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Rpl_PutBlockInPs* internal_default_instance() {
    return reinterpret_cast<const Rpl_PutBlockInPs*>(
               &_Rpl_PutBlockInPs_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    12;

  void Swap(Rpl_PutBlockInPs* other);
  friend void swap(Rpl_PutBlockInPs& a, Rpl_PutBlockInPs& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Rpl_PutBlockInPs* New() const PROTOBUF_FINAL { return New(NULL); }

  Rpl_PutBlockInPs* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const Rpl_PutBlockInPs& from);
  void MergeFrom(const Rpl_PutBlockInPs& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(Rpl_PutBlockInPs* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 task_id = 1;
  void clear_task_id();
  static const int kTaskIdFieldNumber = 1;
  ::google::protobuf::uint32 task_id() const;
  void set_task_id(::google::protobuf::uint32 value);

  // uint32 put_succ = 2;
  void clear_put_succ();
  static const int kPutSuccFieldNumber = 2;
  ::google::protobuf::uint32 put_succ() const;
  void set_put_succ(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Rpl_PutBlockInPs)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 task_id_;
  ::google::protobuf::uint32 put_succ_;
  mutable int _cached_size_;
  friend struct ::protobuf_ProtoPacks_2fcommon_2eproto::TableStruct;
  friend void ::protobuf_ProtoPacks_2fcommon_2eproto::InitDefaultsRpl_PutBlockInPsImpl();
};
// -------------------------------------------------------------------

class ClientOperationFailed : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ClientOperationFailed) */ {
 public:
  ClientOperationFailed();
  virtual ~ClientOperationFailed();

  ClientOperationFailed(const ClientOperationFailed& from);

  inline ClientOperationFailed& operator=(const ClientOperationFailed& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ClientOperationFailed(ClientOperationFailed&& from) noexcept
    : ClientOperationFailed() {
    *this = ::std::move(from);
  }

  inline ClientOperationFailed& operator=(ClientOperationFailed&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ClientOperationFailed& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClientOperationFailed* internal_default_instance() {
    return reinterpret_cast<const ClientOperationFailed*>(
               &_ClientOperationFailed_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    13;

  void Swap(ClientOperationFailed* other);
  friend void swap(ClientOperationFailed& a, ClientOperationFailed& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ClientOperationFailed* New() const PROTOBUF_FINAL { return New(NULL); }

  ClientOperationFailed* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ClientOperationFailed& from);
  void MergeFrom(const ClientOperationFailed& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ClientOperationFailed* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 operation_id = 1;
  void clear_operation_id();
  static const int kOperationIdFieldNumber = 1;
  ::google::protobuf::uint32 operation_id() const;
  void set_operation_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ClientOperationFailed)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 operation_id_;
  mutable int _cached_size_;
  friend struct ::protobuf_ProtoPacks_2fcommon_2eproto::TableStruct;
  friend void ::protobuf_ProtoPacks_2fcommon_2eproto::InitDefaultsClientOperationFailedImpl();
};
// -------------------------------------------------------------------

class ClientOperationSucc : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ClientOperationSucc) */ {
 public:
  ClientOperationSucc();
  virtual ~ClientOperationSucc();

  ClientOperationSucc(const ClientOperationSucc& from);

  inline ClientOperationSucc& operator=(const ClientOperationSucc& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  ClientOperationSucc(ClientOperationSucc&& from) noexcept
    : ClientOperationSucc() {
    *this = ::std::move(from);
  }

  inline ClientOperationSucc& operator=(ClientOperationSucc&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const ClientOperationSucc& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const ClientOperationSucc* internal_default_instance() {
    return reinterpret_cast<const ClientOperationSucc*>(
               &_ClientOperationSucc_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    14;

  void Swap(ClientOperationSucc* other);
  friend void swap(ClientOperationSucc& a, ClientOperationSucc& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline ClientOperationSucc* New() const PROTOBUF_FINAL { return New(NULL); }

  ClientOperationSucc* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const ClientOperationSucc& from);
  void MergeFrom(const ClientOperationSucc& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(ClientOperationSucc* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 operation_id = 1;
  void clear_operation_id();
  static const int kOperationIdFieldNumber = 1;
  ::google::protobuf::uint32 operation_id() const;
  void set_operation_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ClientOperationSucc)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 operation_id_;
  mutable int _cached_size_;
  friend struct ::protobuf_ProtoPacks_2fcommon_2eproto::TableStruct;
  friend void ::protobuf_ProtoPacks_2fcommon_2eproto::InitDefaultsClientOperationSuccImpl();
};
// -------------------------------------------------------------------

class RemoveEntity : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:RemoveEntity) */ {
 public:
  RemoveEntity();
  virtual ~RemoveEntity();

  RemoveEntity(const RemoveEntity& from);

  inline RemoveEntity& operator=(const RemoveEntity& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  RemoveEntity(RemoveEntity&& from) noexcept
    : RemoveEntity() {
    *this = ::std::move(from);
  }

  inline RemoveEntity& operator=(RemoveEntity&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const RemoveEntity& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const RemoveEntity* internal_default_instance() {
    return reinterpret_cast<const RemoveEntity*>(
               &_RemoveEntity_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    15;

  void Swap(RemoveEntity* other);
  friend void swap(RemoveEntity& a, RemoveEntity& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline RemoveEntity* New() const PROTOBUF_FINAL { return New(NULL); }

  RemoveEntity* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const RemoveEntity& from);
  void MergeFrom(const RemoveEntity& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(RemoveEntity* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .RemoveEntityType remove_type = 1;
  void clear_remove_type();
  static const int kRemoveTypeFieldNumber = 1;
  ::RemoveEntityType remove_type() const;
  void set_remove_type(::RemoveEntityType value);

  // uint32 entity_id = 2;
  void clear_entity_id();
  static const int kEntityIdFieldNumber = 2;
  ::google::protobuf::uint32 entity_id() const;
  void set_entity_id(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:RemoveEntity)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  int remove_type_;
  ::google::protobuf::uint32 entity_id_;
  mutable int _cached_size_;
  friend struct ::protobuf_ProtoPacks_2fcommon_2eproto::TableStruct;
  friend void ::protobuf_ProtoPacks_2fcommon_2eproto::InitDefaultsRemoveEntityImpl();
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// ClientFirstConfirm

// .ClientType client_type = 1;
inline void ClientFirstConfirm::clear_client_type() {
  client_type_ = 0;
}
inline ::ClientType ClientFirstConfirm::client_type() const {
  // @@protoc_insertion_point(field_get:ClientFirstConfirm.client_type)
  return static_cast< ::ClientType >(client_type_);
}
inline void ClientFirstConfirm::set_client_type(::ClientType value) {
  
  client_type_ = value;
  // @@protoc_insertion_point(field_set:ClientFirstConfirm.client_type)
}

// -------------------------------------------------------------------

// EntityPos

// .EntityType t = 1;
inline void EntityPos::clear_t() {
  t_ = 0;
}
inline ::EntityType EntityPos::t() const {
  // @@protoc_insertion_point(field_get:EntityPos.t)
  return static_cast< ::EntityType >(t_);
}
inline void EntityPos::set_t(::EntityType value) {
  
  t_ = value;
  // @@protoc_insertion_point(field_set:EntityPos.t)
}

// uint32 entity_id = 2;
inline void EntityPos::clear_entity_id() {
  entity_id_ = 0u;
}
inline ::google::protobuf::uint32 EntityPos::entity_id() const {
  // @@protoc_insertion_point(field_get:EntityPos.entity_id)
  return entity_id_;
}
inline void EntityPos::set_entity_id(::google::protobuf::uint32 value) {
  
  entity_id_ = value;
  // @@protoc_insertion_point(field_set:EntityPos.entity_id)
}

// float x = 3;
inline void EntityPos::clear_x() {
  x_ = 0;
}
inline float EntityPos::x() const {
  // @@protoc_insertion_point(field_get:EntityPos.x)
  return x_;
}
inline void EntityPos::set_x(float value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:EntityPos.x)
}

// float y = 4;
inline void EntityPos::clear_y() {
  y_ = 0;
}
inline float EntityPos::y() const {
  // @@protoc_insertion_point(field_get:EntityPos.y)
  return y_;
}
inline void EntityPos::set_y(float value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:EntityPos.y)
}

// float z = 5;
inline void EntityPos::clear_z() {
  z_ = 0;
}
inline float EntityPos::z() const {
  // @@protoc_insertion_point(field_get:EntityPos.z)
  return z_;
}
inline void EntityPos::set_z(float value) {
  
  z_ = value;
  // @@protoc_insertion_point(field_set:EntityPos.z)
}

// float r_roll = 6;
inline void EntityPos::clear_r_roll() {
  r_roll_ = 0;
}
inline float EntityPos::r_roll() const {
  // @@protoc_insertion_point(field_get:EntityPos.r_roll)
  return r_roll_;
}
inline void EntityPos::set_r_roll(float value) {
  
  r_roll_ = value;
  // @@protoc_insertion_point(field_set:EntityPos.r_roll)
}

// float r_yaw = 7;
inline void EntityPos::clear_r_yaw() {
  r_yaw_ = 0;
}
inline float EntityPos::r_yaw() const {
  // @@protoc_insertion_point(field_get:EntityPos.r_yaw)
  return r_yaw_;
}
inline void EntityPos::set_r_yaw(float value) {
  
  r_yaw_ = value;
  // @@protoc_insertion_point(field_set:EntityPos.r_yaw)
}

// float r_pitch = 8;
inline void EntityPos::clear_r_pitch() {
  r_pitch_ = 0;
}
inline float EntityPos::r_pitch() const {
  // @@protoc_insertion_point(field_get:EntityPos.r_pitch)
  return r_pitch_;
}
inline void EntityPos::set_r_pitch(float value) {
  
  r_pitch_ = value;
  // @@protoc_insertion_point(field_set:EntityPos.r_pitch)
}

// float vx = 9;
inline void EntityPos::clear_vx() {
  vx_ = 0;
}
inline float EntityPos::vx() const {
  // @@protoc_insertion_point(field_get:EntityPos.vx)
  return vx_;
}
inline void EntityPos::set_vx(float value) {
  
  vx_ = value;
  // @@protoc_insertion_point(field_set:EntityPos.vx)
}

// float vy = 10;
inline void EntityPos::clear_vy() {
  vy_ = 0;
}
inline float EntityPos::vy() const {
  // @@protoc_insertion_point(field_get:EntityPos.vy)
  return vy_;
}
inline void EntityPos::set_vy(float value) {
  
  vy_ = value;
  // @@protoc_insertion_point(field_set:EntityPos.vy)
}

// float vz = 11;
inline void EntityPos::clear_vz() {
  vz_ = 0;
}
inline float EntityPos::vz() const {
  // @@protoc_insertion_point(field_get:EntityPos.vz)
  return vz_;
}
inline void EntityPos::set_vz(float value) {
  
  vz_ = value;
  // @@protoc_insertion_point(field_set:EntityPos.vz)
}

// -------------------------------------------------------------------

// PlayerBasic

// uint32 entity_id = 1;
inline void PlayerBasic::clear_entity_id() {
  entity_id_ = 0u;
}
inline ::google::protobuf::uint32 PlayerBasic::entity_id() const {
  // @@protoc_insertion_point(field_get:PlayerBasic.entity_id)
  return entity_id_;
}
inline void PlayerBasic::set_entity_id(::google::protobuf::uint32 value) {
  
  entity_id_ = value;
  // @@protoc_insertion_point(field_set:PlayerBasic.entity_id)
}

// -------------------------------------------------------------------

// ChunkPack

// bytes data = 1;
inline void ChunkPack::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& ChunkPack::data() const {
  // @@protoc_insertion_point(field_get:ChunkPack.data)
  return data_.GetNoArena();
}
inline void ChunkPack::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ChunkPack.data)
}
#if LANG_CXX11
inline void ChunkPack::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ChunkPack.data)
}
#endif
inline void ChunkPack::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ChunkPack.data)
}
inline void ChunkPack::set_data(const void* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ChunkPack.data)
}
inline ::std::string* ChunkPack::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:ChunkPack.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* ChunkPack::release_data() {
  // @@protoc_insertion_point(field_release:ChunkPack.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void ChunkPack::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:ChunkPack.data)
}

// int32 x = 2;
inline void ChunkPack::clear_x() {
  x_ = 0;
}
inline ::google::protobuf::int32 ChunkPack::x() const {
  // @@protoc_insertion_point(field_get:ChunkPack.x)
  return x_;
}
inline void ChunkPack::set_x(::google::protobuf::int32 value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:ChunkPack.x)
}

// int32 y = 3;
inline void ChunkPack::clear_y() {
  y_ = 0;
}
inline ::google::protobuf::int32 ChunkPack::y() const {
  // @@protoc_insertion_point(field_get:ChunkPack.y)
  return y_;
}
inline void ChunkPack::set_y(::google::protobuf::int32 value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:ChunkPack.y)
}

// int32 z = 4;
inline void ChunkPack::clear_z() {
  z_ = 0;
}
inline ::google::protobuf::int32 ChunkPack::z() const {
  // @@protoc_insertion_point(field_get:ChunkPack.z)
  return z_;
}
inline void ChunkPack::set_z(::google::protobuf::int32 value) {
  
  z_ = value;
  // @@protoc_insertion_point(field_set:ChunkPack.z)
}

// -------------------------------------------------------------------

// ChunkEntityPack

// repeated .EntityPos entity_pos = 1;
inline int ChunkEntityPack::entity_pos_size() const {
  return entity_pos_.size();
}
inline void ChunkEntityPack::clear_entity_pos() {
  entity_pos_.Clear();
}
inline const ::EntityPos& ChunkEntityPack::entity_pos(int index) const {
  // @@protoc_insertion_point(field_get:ChunkEntityPack.entity_pos)
  return entity_pos_.Get(index);
}
inline ::EntityPos* ChunkEntityPack::mutable_entity_pos(int index) {
  // @@protoc_insertion_point(field_mutable:ChunkEntityPack.entity_pos)
  return entity_pos_.Mutable(index);
}
inline ::EntityPos* ChunkEntityPack::add_entity_pos() {
  // @@protoc_insertion_point(field_add:ChunkEntityPack.entity_pos)
  return entity_pos_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::EntityPos >*
ChunkEntityPack::mutable_entity_pos() {
  // @@protoc_insertion_point(field_mutable_list:ChunkEntityPack.entity_pos)
  return &entity_pos_;
}
inline const ::google::protobuf::RepeatedPtrField< ::EntityPos >&
ChunkEntityPack::entity_pos() const {
  // @@protoc_insertion_point(field_list:ChunkEntityPack.entity_pos)
  return entity_pos_;
}

// int32 x = 2;
inline void ChunkEntityPack::clear_x() {
  x_ = 0;
}
inline ::google::protobuf::int32 ChunkEntityPack::x() const {
  // @@protoc_insertion_point(field_get:ChunkEntityPack.x)
  return x_;
}
inline void ChunkEntityPack::set_x(::google::protobuf::int32 value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:ChunkEntityPack.x)
}

// int32 y = 3;
inline void ChunkEntityPack::clear_y() {
  y_ = 0;
}
inline ::google::protobuf::int32 ChunkEntityPack::y() const {
  // @@protoc_insertion_point(field_get:ChunkEntityPack.y)
  return y_;
}
inline void ChunkEntityPack::set_y(::google::protobuf::int32 value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:ChunkEntityPack.y)
}

// int32 z = 4;
inline void ChunkEntityPack::clear_z() {
  z_ = 0;
}
inline ::google::protobuf::int32 ChunkEntityPack::z() const {
  // @@protoc_insertion_point(field_get:ChunkEntityPack.z)
  return z_;
}
inline void ChunkEntityPack::set_z(::google::protobuf::int32 value) {
  
  z_ = value;
  // @@protoc_insertion_point(field_set:ChunkEntityPack.z)
}

// -------------------------------------------------------------------

// MainPlayerMoveCmd

// uint32 entity_id = 1;
inline void MainPlayerMoveCmd::clear_entity_id() {
  entity_id_ = 0u;
}
inline ::google::protobuf::uint32 MainPlayerMoveCmd::entity_id() const {
  // @@protoc_insertion_point(field_get:MainPlayerMoveCmd.entity_id)
  return entity_id_;
}
inline void MainPlayerMoveCmd::set_entity_id(::google::protobuf::uint32 value) {
  
  entity_id_ = value;
  // @@protoc_insertion_point(field_set:MainPlayerMoveCmd.entity_id)
}

// float move_forward = 2;
inline void MainPlayerMoveCmd::clear_move_forward() {
  move_forward_ = 0;
}
inline float MainPlayerMoveCmd::move_forward() const {
  // @@protoc_insertion_point(field_get:MainPlayerMoveCmd.move_forward)
  return move_forward_;
}
inline void MainPlayerMoveCmd::set_move_forward(float value) {
  
  move_forward_ = value;
  // @@protoc_insertion_point(field_set:MainPlayerMoveCmd.move_forward)
}

// float move_right = 3;
inline void MainPlayerMoveCmd::clear_move_right() {
  move_right_ = 0;
}
inline float MainPlayerMoveCmd::move_right() const {
  // @@protoc_insertion_point(field_get:MainPlayerMoveCmd.move_right)
  return move_right_;
}
inline void MainPlayerMoveCmd::set_move_right(float value) {
  
  move_right_ = value;
  // @@protoc_insertion_point(field_set:MainPlayerMoveCmd.move_right)
}

// float rotate_yaw = 4;
inline void MainPlayerMoveCmd::clear_rotate_yaw() {
  rotate_yaw_ = 0;
}
inline float MainPlayerMoveCmd::rotate_yaw() const {
  // @@protoc_insertion_point(field_get:MainPlayerMoveCmd.rotate_yaw)
  return rotate_yaw_;
}
inline void MainPlayerMoveCmd::set_rotate_yaw(float value) {
  
  rotate_yaw_ = value;
  // @@protoc_insertion_point(field_set:MainPlayerMoveCmd.rotate_yaw)
}

// -------------------------------------------------------------------

// MainPlayerJumpCmd

// uint32 start_or_end = 1;
inline void MainPlayerJumpCmd::clear_start_or_end() {
  start_or_end_ = 0u;
}
inline ::google::protobuf::uint32 MainPlayerJumpCmd::start_or_end() const {
  // @@protoc_insertion_point(field_get:MainPlayerJumpCmd.start_or_end)
  return start_or_end_;
}
inline void MainPlayerJumpCmd::set_start_or_end(::google::protobuf::uint32 value) {
  
  start_or_end_ = value;
  // @@protoc_insertion_point(field_set:MainPlayerJumpCmd.start_or_end)
}

// uint32 entity_id = 2;
inline void MainPlayerJumpCmd::clear_entity_id() {
  entity_id_ = 0u;
}
inline ::google::protobuf::uint32 MainPlayerJumpCmd::entity_id() const {
  // @@protoc_insertion_point(field_get:MainPlayerJumpCmd.entity_id)
  return entity_id_;
}
inline void MainPlayerJumpCmd::set_entity_id(::google::protobuf::uint32 value) {
  
  entity_id_ = value;
  // @@protoc_insertion_point(field_set:MainPlayerJumpCmd.entity_id)
}

// -------------------------------------------------------------------

// Cmd_SpawnEntityInPs

// uint32 task_id = 1;
inline void Cmd_SpawnEntityInPs::clear_task_id() {
  task_id_ = 0u;
}
inline ::google::protobuf::uint32 Cmd_SpawnEntityInPs::task_id() const {
  // @@protoc_insertion_point(field_get:Cmd_SpawnEntityInPs.task_id)
  return task_id_;
}
inline void Cmd_SpawnEntityInPs::set_task_id(::google::protobuf::uint32 value) {
  
  task_id_ = value;
  // @@protoc_insertion_point(field_set:Cmd_SpawnEntityInPs.task_id)
}

// .EntityPos entity_pos = 2;
inline bool Cmd_SpawnEntityInPs::has_entity_pos() const {
  return this != internal_default_instance() && entity_pos_ != NULL;
}
inline void Cmd_SpawnEntityInPs::clear_entity_pos() {
  if (GetArenaNoVirtual() == NULL && entity_pos_ != NULL) {
    delete entity_pos_;
  }
  entity_pos_ = NULL;
}
inline const ::EntityPos& Cmd_SpawnEntityInPs::entity_pos() const {
  const ::EntityPos* p = entity_pos_;
  // @@protoc_insertion_point(field_get:Cmd_SpawnEntityInPs.entity_pos)
  return p != NULL ? *p : *reinterpret_cast<const ::EntityPos*>(
      &::_EntityPos_default_instance_);
}
inline ::EntityPos* Cmd_SpawnEntityInPs::release_entity_pos() {
  // @@protoc_insertion_point(field_release:Cmd_SpawnEntityInPs.entity_pos)
  
  ::EntityPos* temp = entity_pos_;
  entity_pos_ = NULL;
  return temp;
}
inline ::EntityPos* Cmd_SpawnEntityInPs::mutable_entity_pos() {
  
  if (entity_pos_ == NULL) {
    entity_pos_ = new ::EntityPos;
  }
  // @@protoc_insertion_point(field_mutable:Cmd_SpawnEntityInPs.entity_pos)
  return entity_pos_;
}
inline void Cmd_SpawnEntityInPs::set_allocated_entity_pos(::EntityPos* entity_pos) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete entity_pos_;
  }
  if (entity_pos) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      entity_pos = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, entity_pos, submessage_arena);
    }
    
  } else {
    
  }
  entity_pos_ = entity_pos;
  // @@protoc_insertion_point(field_set_allocated:Cmd_SpawnEntityInPs.entity_pos)
}

// -------------------------------------------------------------------

// Rpl_SpawnEntityInPs

// uint32 task_id = 1;
inline void Rpl_SpawnEntityInPs::clear_task_id() {
  task_id_ = 0u;
}
inline ::google::protobuf::uint32 Rpl_SpawnEntityInPs::task_id() const {
  // @@protoc_insertion_point(field_get:Rpl_SpawnEntityInPs.task_id)
  return task_id_;
}
inline void Rpl_SpawnEntityInPs::set_task_id(::google::protobuf::uint32 value) {
  
  task_id_ = value;
  // @@protoc_insertion_point(field_set:Rpl_SpawnEntityInPs.task_id)
}

// .EntityPos entity_pos = 2;
inline bool Rpl_SpawnEntityInPs::has_entity_pos() const {
  return this != internal_default_instance() && entity_pos_ != NULL;
}
inline void Rpl_SpawnEntityInPs::clear_entity_pos() {
  if (GetArenaNoVirtual() == NULL && entity_pos_ != NULL) {
    delete entity_pos_;
  }
  entity_pos_ = NULL;
}
inline const ::EntityPos& Rpl_SpawnEntityInPs::entity_pos() const {
  const ::EntityPos* p = entity_pos_;
  // @@protoc_insertion_point(field_get:Rpl_SpawnEntityInPs.entity_pos)
  return p != NULL ? *p : *reinterpret_cast<const ::EntityPos*>(
      &::_EntityPos_default_instance_);
}
inline ::EntityPos* Rpl_SpawnEntityInPs::release_entity_pos() {
  // @@protoc_insertion_point(field_release:Rpl_SpawnEntityInPs.entity_pos)
  
  ::EntityPos* temp = entity_pos_;
  entity_pos_ = NULL;
  return temp;
}
inline ::EntityPos* Rpl_SpawnEntityInPs::mutable_entity_pos() {
  
  if (entity_pos_ == NULL) {
    entity_pos_ = new ::EntityPos;
  }
  // @@protoc_insertion_point(field_mutable:Rpl_SpawnEntityInPs.entity_pos)
  return entity_pos_;
}
inline void Rpl_SpawnEntityInPs::set_allocated_entity_pos(::EntityPos* entity_pos) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete entity_pos_;
  }
  if (entity_pos) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      entity_pos = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, entity_pos, submessage_arena);
    }
    
  } else {
    
  }
  entity_pos_ = entity_pos;
  // @@protoc_insertion_point(field_set_allocated:Rpl_SpawnEntityInPs.entity_pos)
}

// -------------------------------------------------------------------

// EntityPosUpdate

// repeated .EntityPos entity_pos = 1;
inline int EntityPosUpdate::entity_pos_size() const {
  return entity_pos_.size();
}
inline void EntityPosUpdate::clear_entity_pos() {
  entity_pos_.Clear();
}
inline const ::EntityPos& EntityPosUpdate::entity_pos(int index) const {
  // @@protoc_insertion_point(field_get:EntityPosUpdate.entity_pos)
  return entity_pos_.Get(index);
}
inline ::EntityPos* EntityPosUpdate::mutable_entity_pos(int index) {
  // @@protoc_insertion_point(field_mutable:EntityPosUpdate.entity_pos)
  return entity_pos_.Mutable(index);
}
inline ::EntityPos* EntityPosUpdate::add_entity_pos() {
  // @@protoc_insertion_point(field_add:EntityPosUpdate.entity_pos)
  return entity_pos_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::EntityPos >*
EntityPosUpdate::mutable_entity_pos() {
  // @@protoc_insertion_point(field_mutable_list:EntityPosUpdate.entity_pos)
  return &entity_pos_;
}
inline const ::google::protobuf::RepeatedPtrField< ::EntityPos >&
EntityPosUpdate::entity_pos() const {
  // @@protoc_insertion_point(field_list:EntityPosUpdate.entity_pos)
  return entity_pos_;
}

// -------------------------------------------------------------------

// PutBlock

// int32 x = 1;
inline void PutBlock::clear_x() {
  x_ = 0;
}
inline ::google::protobuf::int32 PutBlock::x() const {
  // @@protoc_insertion_point(field_get:PutBlock.x)
  return x_;
}
inline void PutBlock::set_x(::google::protobuf::int32 value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:PutBlock.x)
}

// int32 y = 2;
inline void PutBlock::clear_y() {
  y_ = 0;
}
inline ::google::protobuf::int32 PutBlock::y() const {
  // @@protoc_insertion_point(field_get:PutBlock.y)
  return y_;
}
inline void PutBlock::set_y(::google::protobuf::int32 value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:PutBlock.y)
}

// int32 z = 3;
inline void PutBlock::clear_z() {
  z_ = 0;
}
inline ::google::protobuf::int32 PutBlock::z() const {
  // @@protoc_insertion_point(field_get:PutBlock.z)
  return z_;
}
inline void PutBlock::set_z(::google::protobuf::int32 value) {
  
  z_ = value;
  // @@protoc_insertion_point(field_set:PutBlock.z)
}

// int32 block_id = 4;
inline void PutBlock::clear_block_id() {
  block_id_ = 0;
}
inline ::google::protobuf::int32 PutBlock::block_id() const {
  // @@protoc_insertion_point(field_get:PutBlock.block_id)
  return block_id_;
}
inline void PutBlock::set_block_id(::google::protobuf::int32 value) {
  
  block_id_ = value;
  // @@protoc_insertion_point(field_set:PutBlock.block_id)
}

// uint32 operation_id = 5;
inline void PutBlock::clear_operation_id() {
  operation_id_ = 0u;
}
inline ::google::protobuf::uint32 PutBlock::operation_id() const {
  // @@protoc_insertion_point(field_get:PutBlock.operation_id)
  return operation_id_;
}
inline void PutBlock::set_operation_id(::google::protobuf::uint32 value) {
  
  operation_id_ = value;
  // @@protoc_insertion_point(field_set:PutBlock.operation_id)
}

// -------------------------------------------------------------------

// Cmd_PutBlockInPs

// uint32 task_id = 1;
inline void Cmd_PutBlockInPs::clear_task_id() {
  task_id_ = 0u;
}
inline ::google::protobuf::uint32 Cmd_PutBlockInPs::task_id() const {
  // @@protoc_insertion_point(field_get:Cmd_PutBlockInPs.task_id)
  return task_id_;
}
inline void Cmd_PutBlockInPs::set_task_id(::google::protobuf::uint32 value) {
  
  task_id_ = value;
  // @@protoc_insertion_point(field_set:Cmd_PutBlockInPs.task_id)
}

// .PutBlock put_block = 2;
inline bool Cmd_PutBlockInPs::has_put_block() const {
  return this != internal_default_instance() && put_block_ != NULL;
}
inline void Cmd_PutBlockInPs::clear_put_block() {
  if (GetArenaNoVirtual() == NULL && put_block_ != NULL) {
    delete put_block_;
  }
  put_block_ = NULL;
}
inline const ::PutBlock& Cmd_PutBlockInPs::put_block() const {
  const ::PutBlock* p = put_block_;
  // @@protoc_insertion_point(field_get:Cmd_PutBlockInPs.put_block)
  return p != NULL ? *p : *reinterpret_cast<const ::PutBlock*>(
      &::_PutBlock_default_instance_);
}
inline ::PutBlock* Cmd_PutBlockInPs::release_put_block() {
  // @@protoc_insertion_point(field_release:Cmd_PutBlockInPs.put_block)
  
  ::PutBlock* temp = put_block_;
  put_block_ = NULL;
  return temp;
}
inline ::PutBlock* Cmd_PutBlockInPs::mutable_put_block() {
  
  if (put_block_ == NULL) {
    put_block_ = new ::PutBlock;
  }
  // @@protoc_insertion_point(field_mutable:Cmd_PutBlockInPs.put_block)
  return put_block_;
}
inline void Cmd_PutBlockInPs::set_allocated_put_block(::PutBlock* put_block) {
  ::google::protobuf::Arena* message_arena = GetArenaNoVirtual();
  if (message_arena == NULL) {
    delete put_block_;
  }
  if (put_block) {
    ::google::protobuf::Arena* submessage_arena = NULL;
    if (message_arena != submessage_arena) {
      put_block = ::google::protobuf::internal::GetOwnedMessage(
          message_arena, put_block, submessage_arena);
    }
    
  } else {
    
  }
  put_block_ = put_block;
  // @@protoc_insertion_point(field_set_allocated:Cmd_PutBlockInPs.put_block)
}

// -------------------------------------------------------------------

// Rpl_PutBlockInPs

// uint32 task_id = 1;
inline void Rpl_PutBlockInPs::clear_task_id() {
  task_id_ = 0u;
}
inline ::google::protobuf::uint32 Rpl_PutBlockInPs::task_id() const {
  // @@protoc_insertion_point(field_get:Rpl_PutBlockInPs.task_id)
  return task_id_;
}
inline void Rpl_PutBlockInPs::set_task_id(::google::protobuf::uint32 value) {
  
  task_id_ = value;
  // @@protoc_insertion_point(field_set:Rpl_PutBlockInPs.task_id)
}

// uint32 put_succ = 2;
inline void Rpl_PutBlockInPs::clear_put_succ() {
  put_succ_ = 0u;
}
inline ::google::protobuf::uint32 Rpl_PutBlockInPs::put_succ() const {
  // @@protoc_insertion_point(field_get:Rpl_PutBlockInPs.put_succ)
  return put_succ_;
}
inline void Rpl_PutBlockInPs::set_put_succ(::google::protobuf::uint32 value) {
  
  put_succ_ = value;
  // @@protoc_insertion_point(field_set:Rpl_PutBlockInPs.put_succ)
}

// -------------------------------------------------------------------

// ClientOperationFailed

// uint32 operation_id = 1;
inline void ClientOperationFailed::clear_operation_id() {
  operation_id_ = 0u;
}
inline ::google::protobuf::uint32 ClientOperationFailed::operation_id() const {
  // @@protoc_insertion_point(field_get:ClientOperationFailed.operation_id)
  return operation_id_;
}
inline void ClientOperationFailed::set_operation_id(::google::protobuf::uint32 value) {
  
  operation_id_ = value;
  // @@protoc_insertion_point(field_set:ClientOperationFailed.operation_id)
}

// -------------------------------------------------------------------

// ClientOperationSucc

// uint32 operation_id = 1;
inline void ClientOperationSucc::clear_operation_id() {
  operation_id_ = 0u;
}
inline ::google::protobuf::uint32 ClientOperationSucc::operation_id() const {
  // @@protoc_insertion_point(field_get:ClientOperationSucc.operation_id)
  return operation_id_;
}
inline void ClientOperationSucc::set_operation_id(::google::protobuf::uint32 value) {
  
  operation_id_ = value;
  // @@protoc_insertion_point(field_set:ClientOperationSucc.operation_id)
}

// -------------------------------------------------------------------

// RemoveEntity

// .RemoveEntityType remove_type = 1;
inline void RemoveEntity::clear_remove_type() {
  remove_type_ = 0;
}
inline ::RemoveEntityType RemoveEntity::remove_type() const {
  // @@protoc_insertion_point(field_get:RemoveEntity.remove_type)
  return static_cast< ::RemoveEntityType >(remove_type_);
}
inline void RemoveEntity::set_remove_type(::RemoveEntityType value) {
  
  remove_type_ = value;
  // @@protoc_insertion_point(field_set:RemoveEntity.remove_type)
}

// uint32 entity_id = 2;
inline void RemoveEntity::clear_entity_id() {
  entity_id_ = 0u;
}
inline ::google::protobuf::uint32 RemoveEntity::entity_id() const {
  // @@protoc_insertion_point(field_get:RemoveEntity.entity_id)
  return entity_id_;
}
inline void RemoveEntity::set_entity_id(::google::protobuf::uint32 value) {
  
  entity_id_ = value;
  // @@protoc_insertion_point(field_set:RemoveEntity.entity_id)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::ClientType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ClientType>() {
  return ::ClientType_descriptor();
}
template <> struct is_proto_enum< ::EntityType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::EntityType>() {
  return ::EntityType_descriptor();
}
template <> struct is_proto_enum< ::RemoveEntityType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::RemoveEntityType>() {
  return ::RemoveEntityType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ProtoPacks_2fcommon_2eproto__INCLUDED
