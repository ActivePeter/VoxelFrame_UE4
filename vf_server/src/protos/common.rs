// This file is generated by rust-protobuf 2.25.2. Do not edit
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_imports)]
#![allow(unused_results)]
//! Generated file from `common.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
// const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_2_25_2;

#[derive(PartialEq,Clone,Default)]
pub struct ClientFirstConfirm {
    // message fields
    pub client_type: ClientType,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ClientFirstConfirm {
    fn default() -> &'a ClientFirstConfirm {
        <ClientFirstConfirm as ::protobuf::Message>::default_instance()
    }
}

impl ClientFirstConfirm {
    pub fn new() -> ClientFirstConfirm {
        ::std::default::Default::default()
    }

    // .ClientType client_type = 1;


    pub fn get_client_type(&self) -> ClientType {
        self.client_type
    }
    pub fn clear_client_type(&mut self) {
        self.client_type = ClientType::ClientType_GameServer;
    }

    // Param is passed by value, moved
    pub fn set_client_type(&mut self, v: ClientType) {
        self.client_type = v;
    }
}

impl ::protobuf::Message for ClientFirstConfirm {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.client_type, 1, &mut self.unknown_fields)?
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.client_type != ClientType::ClientType_GameServer {
            my_size += ::protobuf::rt::enum_size(1, self.client_type);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.client_type != ClientType::ClientType_GameServer {
            os.write_enum(1, ::protobuf::ProtobufEnum::value(&self.client_type))?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ClientFirstConfirm {
        ClientFirstConfirm::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<ClientType>>(
                "client_type",
                |m: &ClientFirstConfirm| { &m.client_type },
                |m: &mut ClientFirstConfirm| { &mut m.client_type },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ClientFirstConfirm>(
                "ClientFirstConfirm",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ClientFirstConfirm {
        static instance: ::protobuf::rt::LazyV2<ClientFirstConfirm> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ClientFirstConfirm::new)
    }
}

impl ::protobuf::Clear for ClientFirstConfirm {
    fn clear(&mut self) {
        self.client_type = ClientType::ClientType_GameServer;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ClientFirstConfirm {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ClientFirstConfirm {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct EntityPos {
    // message fields
    pub t: EntityType,
    pub entity_id: u32,
    pub x: f32,
    pub y: f32,
    pub z: f32,
    pub r_roll: f32,
    pub r_yaw: f32,
    pub r_pitch: f32,
    pub vx: f32,
    pub vy: f32,
    pub vz: f32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a EntityPos {
    fn default() -> &'a EntityPos {
        <EntityPos as ::protobuf::Message>::default_instance()
    }
}

impl EntityPos {
    pub fn new() -> EntityPos {
        ::std::default::Default::default()
    }

    // .EntityType t = 1;


    pub fn get_t(&self) -> EntityType {
        self.t
    }
    pub fn clear_t(&mut self) {
        self.t = EntityType::T_Null;
    }

    // Param is passed by value, moved
    pub fn set_t(&mut self, v: EntityType) {
        self.t = v;
    }

    // uint32 entity_id = 2;


    pub fn get_entity_id(&self) -> u32 {
        self.entity_id
    }
    pub fn clear_entity_id(&mut self) {
        self.entity_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_entity_id(&mut self, v: u32) {
        self.entity_id = v;
    }

    // float x = 3;


    pub fn get_x(&self) -> f32 {
        self.x
    }
    pub fn clear_x(&mut self) {
        self.x = 0.;
    }

    // Param is passed by value, moved
    pub fn set_x(&mut self, v: f32) {
        self.x = v;
    }

    // float y = 4;


    pub fn get_y(&self) -> f32 {
        self.y
    }
    pub fn clear_y(&mut self) {
        self.y = 0.;
    }

    // Param is passed by value, moved
    pub fn set_y(&mut self, v: f32) {
        self.y = v;
    }

    // float z = 5;


    pub fn get_z(&self) -> f32 {
        self.z
    }
    pub fn clear_z(&mut self) {
        self.z = 0.;
    }

    // Param is passed by value, moved
    pub fn set_z(&mut self, v: f32) {
        self.z = v;
    }

    // float r_roll = 6;


    pub fn get_r_roll(&self) -> f32 {
        self.r_roll
    }
    pub fn clear_r_roll(&mut self) {
        self.r_roll = 0.;
    }

    // Param is passed by value, moved
    pub fn set_r_roll(&mut self, v: f32) {
        self.r_roll = v;
    }

    // float r_yaw = 7;


    pub fn get_r_yaw(&self) -> f32 {
        self.r_yaw
    }
    pub fn clear_r_yaw(&mut self) {
        self.r_yaw = 0.;
    }

    // Param is passed by value, moved
    pub fn set_r_yaw(&mut self, v: f32) {
        self.r_yaw = v;
    }

    // float r_pitch = 8;


    pub fn get_r_pitch(&self) -> f32 {
        self.r_pitch
    }
    pub fn clear_r_pitch(&mut self) {
        self.r_pitch = 0.;
    }

    // Param is passed by value, moved
    pub fn set_r_pitch(&mut self, v: f32) {
        self.r_pitch = v;
    }

    // float vx = 9;


    pub fn get_vx(&self) -> f32 {
        self.vx
    }
    pub fn clear_vx(&mut self) {
        self.vx = 0.;
    }

    // Param is passed by value, moved
    pub fn set_vx(&mut self, v: f32) {
        self.vx = v;
    }

    // float vy = 10;


    pub fn get_vy(&self) -> f32 {
        self.vy
    }
    pub fn clear_vy(&mut self) {
        self.vy = 0.;
    }

    // Param is passed by value, moved
    pub fn set_vy(&mut self, v: f32) {
        self.vy = v;
    }

    // float vz = 11;


    pub fn get_vz(&self) -> f32 {
        self.vz
    }
    pub fn clear_vz(&mut self) {
        self.vz = 0.;
    }

    // Param is passed by value, moved
    pub fn set_vz(&mut self, v: f32) {
        self.vz = v;
    }
}

impl ::protobuf::Message for EntityPos {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_proto3_enum_with_unknown_fields_into(wire_type, is, &mut self.t, 1, &mut self.unknown_fields)?
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.entity_id = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.x = tmp;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.y = tmp;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.z = tmp;
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.r_roll = tmp;
                },
                7 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.r_yaw = tmp;
                },
                8 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.r_pitch = tmp;
                },
                9 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.vx = tmp;
                },
                10 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.vy = tmp;
                },
                11 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.vz = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.t != EntityType::T_Null {
            my_size += ::protobuf::rt::enum_size(1, self.t);
        }
        if self.entity_id != 0 {
            my_size += ::protobuf::rt::value_size(2, self.entity_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.x != 0. {
            my_size += 5;
        }
        if self.y != 0. {
            my_size += 5;
        }
        if self.z != 0. {
            my_size += 5;
        }
        if self.r_roll != 0. {
            my_size += 5;
        }
        if self.r_yaw != 0. {
            my_size += 5;
        }
        if self.r_pitch != 0. {
            my_size += 5;
        }
        if self.vx != 0. {
            my_size += 5;
        }
        if self.vy != 0. {
            my_size += 5;
        }
        if self.vz != 0. {
            my_size += 5;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.t != EntityType::T_Null {
            os.write_enum(1, ::protobuf::ProtobufEnum::value(&self.t))?;
        }
        if self.entity_id != 0 {
            os.write_uint32(2, self.entity_id)?;
        }
        if self.x != 0. {
            os.write_float(3, self.x)?;
        }
        if self.y != 0. {
            os.write_float(4, self.y)?;
        }
        if self.z != 0. {
            os.write_float(5, self.z)?;
        }
        if self.r_roll != 0. {
            os.write_float(6, self.r_roll)?;
        }
        if self.r_yaw != 0. {
            os.write_float(7, self.r_yaw)?;
        }
        if self.r_pitch != 0. {
            os.write_float(8, self.r_pitch)?;
        }
        if self.vx != 0. {
            os.write_float(9, self.vx)?;
        }
        if self.vy != 0. {
            os.write_float(10, self.vy)?;
        }
        if self.vz != 0. {
            os.write_float(11, self.vz)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> EntityPos {
        EntityPos::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeEnum<EntityType>>(
                "t",
                |m: &EntityPos| { &m.t },
                |m: &mut EntityPos| { &mut m.t },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "entity_id",
                |m: &EntityPos| { &m.entity_id },
                |m: &mut EntityPos| { &mut m.entity_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                "x",
                |m: &EntityPos| { &m.x },
                |m: &mut EntityPos| { &mut m.x },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                "y",
                |m: &EntityPos| { &m.y },
                |m: &mut EntityPos| { &mut m.y },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                "z",
                |m: &EntityPos| { &m.z },
                |m: &mut EntityPos| { &mut m.z },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                "r_roll",
                |m: &EntityPos| { &m.r_roll },
                |m: &mut EntityPos| { &mut m.r_roll },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                "r_yaw",
                |m: &EntityPos| { &m.r_yaw },
                |m: &mut EntityPos| { &mut m.r_yaw },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                "r_pitch",
                |m: &EntityPos| { &m.r_pitch },
                |m: &mut EntityPos| { &mut m.r_pitch },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                "vx",
                |m: &EntityPos| { &m.vx },
                |m: &mut EntityPos| { &mut m.vx },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                "vy",
                |m: &EntityPos| { &m.vy },
                |m: &mut EntityPos| { &mut m.vy },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                "vz",
                |m: &EntityPos| { &m.vz },
                |m: &mut EntityPos| { &mut m.vz },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<EntityPos>(
                "EntityPos",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static EntityPos {
        static instance: ::protobuf::rt::LazyV2<EntityPos> = ::protobuf::rt::LazyV2::INIT;
        instance.get(EntityPos::new)
    }
}

impl ::protobuf::Clear for EntityPos {
    fn clear(&mut self) {
        self.t = EntityType::T_Null;
        self.entity_id = 0;
        self.x = 0.;
        self.y = 0.;
        self.z = 0.;
        self.r_roll = 0.;
        self.r_yaw = 0.;
        self.r_pitch = 0.;
        self.vx = 0.;
        self.vy = 0.;
        self.vz = 0.;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for EntityPos {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for EntityPos {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct PlayerBasic {
    // message fields
    pub entity_id: u32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a PlayerBasic {
    fn default() -> &'a PlayerBasic {
        <PlayerBasic as ::protobuf::Message>::default_instance()
    }
}

impl PlayerBasic {
    pub fn new() -> PlayerBasic {
        ::std::default::Default::default()
    }

    // uint32 entity_id = 1;


    pub fn get_entity_id(&self) -> u32 {
        self.entity_id
    }
    pub fn clear_entity_id(&mut self) {
        self.entity_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_entity_id(&mut self, v: u32) {
        self.entity_id = v;
    }
}

impl ::protobuf::Message for PlayerBasic {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.entity_id = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.entity_id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.entity_id, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.entity_id != 0 {
            os.write_uint32(1, self.entity_id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> PlayerBasic {
        PlayerBasic::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "entity_id",
                |m: &PlayerBasic| { &m.entity_id },
                |m: &mut PlayerBasic| { &mut m.entity_id },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<PlayerBasic>(
                "PlayerBasic",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static PlayerBasic {
        static instance: ::protobuf::rt::LazyV2<PlayerBasic> = ::protobuf::rt::LazyV2::INIT;
        instance.get(PlayerBasic::new)
    }
}

impl ::protobuf::Clear for PlayerBasic {
    fn clear(&mut self) {
        self.entity_id = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for PlayerBasic {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PlayerBasic {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ChunkPack {
    // message fields
    pub data: ::std::vec::Vec<u8>,
    pub x: i32,
    pub y: i32,
    pub z: i32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ChunkPack {
    fn default() -> &'a ChunkPack {
        <ChunkPack as ::protobuf::Message>::default_instance()
    }
}

impl ChunkPack {
    pub fn new() -> ChunkPack {
        ::std::default::Default::default()
    }

    // bytes data = 1;


    pub fn get_data(&self) -> &[u8] {
        &self.data
    }
    pub fn clear_data(&mut self) {
        self.data.clear();
    }

    // Param is passed by value, moved
    pub fn set_data(&mut self, v: ::std::vec::Vec<u8>) {
        self.data = v;
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_data(&mut self) -> &mut ::std::vec::Vec<u8> {
        &mut self.data
    }

    // Take field
    pub fn take_data(&mut self) -> ::std::vec::Vec<u8> {
        ::std::mem::replace(&mut self.data, ::std::vec::Vec::new())
    }

    // int32 x = 2;


    pub fn get_x(&self) -> i32 {
        self.x
    }
    pub fn clear_x(&mut self) {
        self.x = 0;
    }

    // Param is passed by value, moved
    pub fn set_x(&mut self, v: i32) {
        self.x = v;
    }

    // int32 y = 3;


    pub fn get_y(&self) -> i32 {
        self.y
    }
    pub fn clear_y(&mut self) {
        self.y = 0;
    }

    // Param is passed by value, moved
    pub fn set_y(&mut self, v: i32) {
        self.y = v;
    }

    // int32 z = 4;


    pub fn get_z(&self) -> i32 {
        self.z
    }
    pub fn clear_z(&mut self) {
        self.z = 0;
    }

    // Param is passed by value, moved
    pub fn set_z(&mut self, v: i32) {
        self.z = v;
    }
}

impl ::protobuf::Message for ChunkPack {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_singular_proto3_bytes_into(wire_type, is, &mut self.data)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.x = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.y = tmp;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.z = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if !self.data.is_empty() {
            my_size += ::protobuf::rt::bytes_size(1, &self.data);
        }
        if self.x != 0 {
            my_size += ::protobuf::rt::value_size(2, self.x, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.y != 0 {
            my_size += ::protobuf::rt::value_size(3, self.y, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.z != 0 {
            my_size += ::protobuf::rt::value_size(4, self.z, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if !self.data.is_empty() {
            os.write_bytes(1, &self.data)?;
        }
        if self.x != 0 {
            os.write_int32(2, self.x)?;
        }
        if self.y != 0 {
            os.write_int32(3, self.y)?;
        }
        if self.z != 0 {
            os.write_int32(4, self.z)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ChunkPack {
        ChunkPack::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeBytes>(
                "data",
                |m: &ChunkPack| { &m.data },
                |m: &mut ChunkPack| { &mut m.data },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "x",
                |m: &ChunkPack| { &m.x },
                |m: &mut ChunkPack| { &mut m.x },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "y",
                |m: &ChunkPack| { &m.y },
                |m: &mut ChunkPack| { &mut m.y },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "z",
                |m: &ChunkPack| { &m.z },
                |m: &mut ChunkPack| { &mut m.z },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ChunkPack>(
                "ChunkPack",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ChunkPack {
        static instance: ::protobuf::rt::LazyV2<ChunkPack> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ChunkPack::new)
    }
}

impl ::protobuf::Clear for ChunkPack {
    fn clear(&mut self) {
        self.data.clear();
        self.x = 0;
        self.y = 0;
        self.z = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ChunkPack {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ChunkPack {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ChunkEntityPack {
    // message fields
    pub entity_pos: ::protobuf::RepeatedField<EntityPos>,
    pub x: i32,
    pub y: i32,
    pub z: i32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ChunkEntityPack {
    fn default() -> &'a ChunkEntityPack {
        <ChunkEntityPack as ::protobuf::Message>::default_instance()
    }
}

impl ChunkEntityPack {
    pub fn new() -> ChunkEntityPack {
        ::std::default::Default::default()
    }

    // repeated .EntityPos entity_pos = 1;


    pub fn get_entity_pos(&self) -> &[EntityPos] {
        &self.entity_pos
    }
    pub fn clear_entity_pos(&mut self) {
        self.entity_pos.clear();
    }

    // Param is passed by value, moved
    pub fn set_entity_pos(&mut self, v: ::protobuf::RepeatedField<EntityPos>) {
        self.entity_pos = v;
    }

    // Mutable pointer to the field.
    pub fn mut_entity_pos(&mut self) -> &mut ::protobuf::RepeatedField<EntityPos> {
        &mut self.entity_pos
    }

    // Take field
    pub fn take_entity_pos(&mut self) -> ::protobuf::RepeatedField<EntityPos> {
        ::std::mem::replace(&mut self.entity_pos, ::protobuf::RepeatedField::new())
    }

    // int32 x = 2;


    pub fn get_x(&self) -> i32 {
        self.x
    }
    pub fn clear_x(&mut self) {
        self.x = 0;
    }

    // Param is passed by value, moved
    pub fn set_x(&mut self, v: i32) {
        self.x = v;
    }

    // int32 y = 3;


    pub fn get_y(&self) -> i32 {
        self.y
    }
    pub fn clear_y(&mut self) {
        self.y = 0;
    }

    // Param is passed by value, moved
    pub fn set_y(&mut self, v: i32) {
        self.y = v;
    }

    // int32 z = 4;


    pub fn get_z(&self) -> i32 {
        self.z
    }
    pub fn clear_z(&mut self) {
        self.z = 0;
    }

    // Param is passed by value, moved
    pub fn set_z(&mut self, v: i32) {
        self.z = v;
    }
}

impl ::protobuf::Message for ChunkEntityPack {
    fn is_initialized(&self) -> bool {
        for v in &self.entity_pos {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.entity_pos)?;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.x = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.y = tmp;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.z = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.entity_pos {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        if self.x != 0 {
            my_size += ::protobuf::rt::value_size(2, self.x, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.y != 0 {
            my_size += ::protobuf::rt::value_size(3, self.y, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.z != 0 {
            my_size += ::protobuf::rt::value_size(4, self.z, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.entity_pos {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        if self.x != 0 {
            os.write_int32(2, self.x)?;
        }
        if self.y != 0 {
            os.write_int32(3, self.y)?;
        }
        if self.z != 0 {
            os.write_int32(4, self.z)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ChunkEntityPack {
        ChunkEntityPack::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<EntityPos>>(
                "entity_pos",
                |m: &ChunkEntityPack| { &m.entity_pos },
                |m: &mut ChunkEntityPack| { &mut m.entity_pos },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "x",
                |m: &ChunkEntityPack| { &m.x },
                |m: &mut ChunkEntityPack| { &mut m.x },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "y",
                |m: &ChunkEntityPack| { &m.y },
                |m: &mut ChunkEntityPack| { &mut m.y },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "z",
                |m: &ChunkEntityPack| { &m.z },
                |m: &mut ChunkEntityPack| { &mut m.z },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ChunkEntityPack>(
                "ChunkEntityPack",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ChunkEntityPack {
        static instance: ::protobuf::rt::LazyV2<ChunkEntityPack> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ChunkEntityPack::new)
    }
}

impl ::protobuf::Clear for ChunkEntityPack {
    fn clear(&mut self) {
        self.entity_pos.clear();
        self.x = 0;
        self.y = 0;
        self.z = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ChunkEntityPack {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ChunkEntityPack {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct MainPlayerMoveCmd {
    // message fields
    pub entity_id: u32,
    pub x: f32,
    pub y: f32,
    pub rotate_pitch: f32,
    pub rotate_yaw: f32,
    pub rotate_roll: f32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a MainPlayerMoveCmd {
    fn default() -> &'a MainPlayerMoveCmd {
        <MainPlayerMoveCmd as ::protobuf::Message>::default_instance()
    }
}

impl MainPlayerMoveCmd {
    pub fn new() -> MainPlayerMoveCmd {
        ::std::default::Default::default()
    }

    // uint32 entity_id = 1;


    pub fn get_entity_id(&self) -> u32 {
        self.entity_id
    }
    pub fn clear_entity_id(&mut self) {
        self.entity_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_entity_id(&mut self, v: u32) {
        self.entity_id = v;
    }

    // float x = 2;


    pub fn get_x(&self) -> f32 {
        self.x
    }
    pub fn clear_x(&mut self) {
        self.x = 0.;
    }

    // Param is passed by value, moved
    pub fn set_x(&mut self, v: f32) {
        self.x = v;
    }

    // float y = 3;


    pub fn get_y(&self) -> f32 {
        self.y
    }
    pub fn clear_y(&mut self) {
        self.y = 0.;
    }

    // Param is passed by value, moved
    pub fn set_y(&mut self, v: f32) {
        self.y = v;
    }

    // float rotate_pitch = 4;


    pub fn get_rotate_pitch(&self) -> f32 {
        self.rotate_pitch
    }
    pub fn clear_rotate_pitch(&mut self) {
        self.rotate_pitch = 0.;
    }

    // Param is passed by value, moved
    pub fn set_rotate_pitch(&mut self, v: f32) {
        self.rotate_pitch = v;
    }

    // float rotate_yaw = 5;


    pub fn get_rotate_yaw(&self) -> f32 {
        self.rotate_yaw
    }
    pub fn clear_rotate_yaw(&mut self) {
        self.rotate_yaw = 0.;
    }

    // Param is passed by value, moved
    pub fn set_rotate_yaw(&mut self, v: f32) {
        self.rotate_yaw = v;
    }

    // float rotate_roll = 6;


    pub fn get_rotate_roll(&self) -> f32 {
        self.rotate_roll
    }
    pub fn clear_rotate_roll(&mut self) {
        self.rotate_roll = 0.;
    }

    // Param is passed by value, moved
    pub fn set_rotate_roll(&mut self, v: f32) {
        self.rotate_roll = v;
    }
}

impl ::protobuf::Message for MainPlayerMoveCmd {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.entity_id = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.x = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.y = tmp;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.rotate_pitch = tmp;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.rotate_yaw = tmp;
                },
                6 => {
                    if wire_type != ::protobuf::wire_format::WireTypeFixed32 {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_float()?;
                    self.rotate_roll = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.entity_id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.entity_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.x != 0. {
            my_size += 5;
        }
        if self.y != 0. {
            my_size += 5;
        }
        if self.rotate_pitch != 0. {
            my_size += 5;
        }
        if self.rotate_yaw != 0. {
            my_size += 5;
        }
        if self.rotate_roll != 0. {
            my_size += 5;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.entity_id != 0 {
            os.write_uint32(1, self.entity_id)?;
        }
        if self.x != 0. {
            os.write_float(2, self.x)?;
        }
        if self.y != 0. {
            os.write_float(3, self.y)?;
        }
        if self.rotate_pitch != 0. {
            os.write_float(4, self.rotate_pitch)?;
        }
        if self.rotate_yaw != 0. {
            os.write_float(5, self.rotate_yaw)?;
        }
        if self.rotate_roll != 0. {
            os.write_float(6, self.rotate_roll)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> MainPlayerMoveCmd {
        MainPlayerMoveCmd::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "entity_id",
                |m: &MainPlayerMoveCmd| { &m.entity_id },
                |m: &mut MainPlayerMoveCmd| { &mut m.entity_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                "x",
                |m: &MainPlayerMoveCmd| { &m.x },
                |m: &mut MainPlayerMoveCmd| { &mut m.x },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                "y",
                |m: &MainPlayerMoveCmd| { &m.y },
                |m: &mut MainPlayerMoveCmd| { &mut m.y },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                "rotate_pitch",
                |m: &MainPlayerMoveCmd| { &m.rotate_pitch },
                |m: &mut MainPlayerMoveCmd| { &mut m.rotate_pitch },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                "rotate_yaw",
                |m: &MainPlayerMoveCmd| { &m.rotate_yaw },
                |m: &mut MainPlayerMoveCmd| { &mut m.rotate_yaw },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeFloat>(
                "rotate_roll",
                |m: &MainPlayerMoveCmd| { &m.rotate_roll },
                |m: &mut MainPlayerMoveCmd| { &mut m.rotate_roll },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<MainPlayerMoveCmd>(
                "MainPlayerMoveCmd",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static MainPlayerMoveCmd {
        static instance: ::protobuf::rt::LazyV2<MainPlayerMoveCmd> = ::protobuf::rt::LazyV2::INIT;
        instance.get(MainPlayerMoveCmd::new)
    }
}

impl ::protobuf::Clear for MainPlayerMoveCmd {
    fn clear(&mut self) {
        self.entity_id = 0;
        self.x = 0.;
        self.y = 0.;
        self.rotate_pitch = 0.;
        self.rotate_yaw = 0.;
        self.rotate_roll = 0.;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for MainPlayerMoveCmd {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MainPlayerMoveCmd {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Cmd_SpawnEntityInPs {
    // message fields
    pub task_id: u32,
    pub entity_pos: ::protobuf::SingularPtrField<EntityPos>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Cmd_SpawnEntityInPs {
    fn default() -> &'a Cmd_SpawnEntityInPs {
        <Cmd_SpawnEntityInPs as ::protobuf::Message>::default_instance()
    }
}

impl Cmd_SpawnEntityInPs {
    pub fn new() -> Cmd_SpawnEntityInPs {
        ::std::default::Default::default()
    }

    // uint32 task_id = 1;


    pub fn get_task_id(&self) -> u32 {
        self.task_id
    }
    pub fn clear_task_id(&mut self) {
        self.task_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_task_id(&mut self, v: u32) {
        self.task_id = v;
    }

    // .EntityPos entity_pos = 2;


    pub fn get_entity_pos(&self) -> &EntityPos {
        self.entity_pos.as_ref().unwrap_or_else(|| <EntityPos as ::protobuf::Message>::default_instance())
    }
    pub fn clear_entity_pos(&mut self) {
        self.entity_pos.clear();
    }

    pub fn has_entity_pos(&self) -> bool {
        self.entity_pos.is_some()
    }

    // Param is passed by value, moved
    pub fn set_entity_pos(&mut self, v: EntityPos) {
        self.entity_pos = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_entity_pos(&mut self) -> &mut EntityPos {
        if self.entity_pos.is_none() {
            self.entity_pos.set_default();
        }
        self.entity_pos.as_mut().unwrap()
    }

    // Take field
    pub fn take_entity_pos(&mut self) -> EntityPos {
        self.entity_pos.take().unwrap_or_else(|| EntityPos::new())
    }
}

impl ::protobuf::Message for Cmd_SpawnEntityInPs {
    fn is_initialized(&self) -> bool {
        for v in &self.entity_pos {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.task_id = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.entity_pos)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.task_id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.task_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.entity_pos.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.task_id != 0 {
            os.write_uint32(1, self.task_id)?;
        }
        if let Some(ref v) = self.entity_pos.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Cmd_SpawnEntityInPs {
        Cmd_SpawnEntityInPs::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "task_id",
                |m: &Cmd_SpawnEntityInPs| { &m.task_id },
                |m: &mut Cmd_SpawnEntityInPs| { &mut m.task_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<EntityPos>>(
                "entity_pos",
                |m: &Cmd_SpawnEntityInPs| { &m.entity_pos },
                |m: &mut Cmd_SpawnEntityInPs| { &mut m.entity_pos },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Cmd_SpawnEntityInPs>(
                "Cmd_SpawnEntityInPs",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Cmd_SpawnEntityInPs {
        static instance: ::protobuf::rt::LazyV2<Cmd_SpawnEntityInPs> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Cmd_SpawnEntityInPs::new)
    }
}

impl ::protobuf::Clear for Cmd_SpawnEntityInPs {
    fn clear(&mut self) {
        self.task_id = 0;
        self.entity_pos.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Cmd_SpawnEntityInPs {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Cmd_SpawnEntityInPs {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Rpl_SpawnEntityInPs {
    // message fields
    pub task_id: u32,
    pub entity_pos: ::protobuf::SingularPtrField<EntityPos>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Rpl_SpawnEntityInPs {
    fn default() -> &'a Rpl_SpawnEntityInPs {
        <Rpl_SpawnEntityInPs as ::protobuf::Message>::default_instance()
    }
}

impl Rpl_SpawnEntityInPs {
    pub fn new() -> Rpl_SpawnEntityInPs {
        ::std::default::Default::default()
    }

    // uint32 task_id = 1;


    pub fn get_task_id(&self) -> u32 {
        self.task_id
    }
    pub fn clear_task_id(&mut self) {
        self.task_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_task_id(&mut self, v: u32) {
        self.task_id = v;
    }

    // .EntityPos entity_pos = 2;


    pub fn get_entity_pos(&self) -> &EntityPos {
        self.entity_pos.as_ref().unwrap_or_else(|| <EntityPos as ::protobuf::Message>::default_instance())
    }
    pub fn clear_entity_pos(&mut self) {
        self.entity_pos.clear();
    }

    pub fn has_entity_pos(&self) -> bool {
        self.entity_pos.is_some()
    }

    // Param is passed by value, moved
    pub fn set_entity_pos(&mut self, v: EntityPos) {
        self.entity_pos = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_entity_pos(&mut self) -> &mut EntityPos {
        if self.entity_pos.is_none() {
            self.entity_pos.set_default();
        }
        self.entity_pos.as_mut().unwrap()
    }

    // Take field
    pub fn take_entity_pos(&mut self) -> EntityPos {
        self.entity_pos.take().unwrap_or_else(|| EntityPos::new())
    }
}

impl ::protobuf::Message for Rpl_SpawnEntityInPs {
    fn is_initialized(&self) -> bool {
        for v in &self.entity_pos {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.task_id = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.entity_pos)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.task_id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.task_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.entity_pos.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.task_id != 0 {
            os.write_uint32(1, self.task_id)?;
        }
        if let Some(ref v) = self.entity_pos.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Rpl_SpawnEntityInPs {
        Rpl_SpawnEntityInPs::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "task_id",
                |m: &Rpl_SpawnEntityInPs| { &m.task_id },
                |m: &mut Rpl_SpawnEntityInPs| { &mut m.task_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<EntityPos>>(
                "entity_pos",
                |m: &Rpl_SpawnEntityInPs| { &m.entity_pos },
                |m: &mut Rpl_SpawnEntityInPs| { &mut m.entity_pos },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Rpl_SpawnEntityInPs>(
                "Rpl_SpawnEntityInPs",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Rpl_SpawnEntityInPs {
        static instance: ::protobuf::rt::LazyV2<Rpl_SpawnEntityInPs> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Rpl_SpawnEntityInPs::new)
    }
}

impl ::protobuf::Clear for Rpl_SpawnEntityInPs {
    fn clear(&mut self) {
        self.task_id = 0;
        self.entity_pos.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Rpl_SpawnEntityInPs {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Rpl_SpawnEntityInPs {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct EntityPosUpdate {
    // message fields
    pub entity_pos: ::protobuf::RepeatedField<EntityPos>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a EntityPosUpdate {
    fn default() -> &'a EntityPosUpdate {
        <EntityPosUpdate as ::protobuf::Message>::default_instance()
    }
}

impl EntityPosUpdate {
    pub fn new() -> EntityPosUpdate {
        ::std::default::Default::default()
    }

    // repeated .EntityPos entity_pos = 1;


    pub fn get_entity_pos(&self) -> &[EntityPos] {
        &self.entity_pos
    }
    pub fn clear_entity_pos(&mut self) {
        self.entity_pos.clear();
    }

    // Param is passed by value, moved
    pub fn set_entity_pos(&mut self, v: ::protobuf::RepeatedField<EntityPos>) {
        self.entity_pos = v;
    }

    // Mutable pointer to the field.
    pub fn mut_entity_pos(&mut self) -> &mut ::protobuf::RepeatedField<EntityPos> {
        &mut self.entity_pos
    }

    // Take field
    pub fn take_entity_pos(&mut self) -> ::protobuf::RepeatedField<EntityPos> {
        ::std::mem::replace(&mut self.entity_pos, ::protobuf::RepeatedField::new())
    }
}

impl ::protobuf::Message for EntityPosUpdate {
    fn is_initialized(&self) -> bool {
        for v in &self.entity_pos {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    ::protobuf::rt::read_repeated_message_into(wire_type, is, &mut self.entity_pos)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        for value in &self.entity_pos {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        for v in &self.entity_pos {
            os.write_tag(1, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        };
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> EntityPosUpdate {
        EntityPosUpdate::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_repeated_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<EntityPos>>(
                "entity_pos",
                |m: &EntityPosUpdate| { &m.entity_pos },
                |m: &mut EntityPosUpdate| { &mut m.entity_pos },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<EntityPosUpdate>(
                "EntityPosUpdate",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static EntityPosUpdate {
        static instance: ::protobuf::rt::LazyV2<EntityPosUpdate> = ::protobuf::rt::LazyV2::INIT;
        instance.get(EntityPosUpdate::new)
    }
}

impl ::protobuf::Clear for EntityPosUpdate {
    fn clear(&mut self) {
        self.entity_pos.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for EntityPosUpdate {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for EntityPosUpdate {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct PutBlock {
    // message fields
    pub x: i32,
    pub y: i32,
    pub z: i32,
    pub block_id: i32,
    pub operation_id: u32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a PutBlock {
    fn default() -> &'a PutBlock {
        <PutBlock as ::protobuf::Message>::default_instance()
    }
}

impl PutBlock {
    pub fn new() -> PutBlock {
        ::std::default::Default::default()
    }

    // int32 x = 1;


    pub fn get_x(&self) -> i32 {
        self.x
    }
    pub fn clear_x(&mut self) {
        self.x = 0;
    }

    // Param is passed by value, moved
    pub fn set_x(&mut self, v: i32) {
        self.x = v;
    }

    // int32 y = 2;


    pub fn get_y(&self) -> i32 {
        self.y
    }
    pub fn clear_y(&mut self) {
        self.y = 0;
    }

    // Param is passed by value, moved
    pub fn set_y(&mut self, v: i32) {
        self.y = v;
    }

    // int32 z = 3;


    pub fn get_z(&self) -> i32 {
        self.z
    }
    pub fn clear_z(&mut self) {
        self.z = 0;
    }

    // Param is passed by value, moved
    pub fn set_z(&mut self, v: i32) {
        self.z = v;
    }

    // int32 block_id = 4;


    pub fn get_block_id(&self) -> i32 {
        self.block_id
    }
    pub fn clear_block_id(&mut self) {
        self.block_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_block_id(&mut self, v: i32) {
        self.block_id = v;
    }

    // uint32 operation_id = 5;


    pub fn get_operation_id(&self) -> u32 {
        self.operation_id
    }
    pub fn clear_operation_id(&mut self) {
        self.operation_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_operation_id(&mut self, v: u32) {
        self.operation_id = v;
    }
}

impl ::protobuf::Message for PutBlock {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.x = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.y = tmp;
                },
                3 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.z = tmp;
                },
                4 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_int32()?;
                    self.block_id = tmp;
                },
                5 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.operation_id = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.x != 0 {
            my_size += ::protobuf::rt::value_size(1, self.x, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.y != 0 {
            my_size += ::protobuf::rt::value_size(2, self.y, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.z != 0 {
            my_size += ::protobuf::rt::value_size(3, self.z, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.block_id != 0 {
            my_size += ::protobuf::rt::value_size(4, self.block_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.operation_id != 0 {
            my_size += ::protobuf::rt::value_size(5, self.operation_id, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.x != 0 {
            os.write_int32(1, self.x)?;
        }
        if self.y != 0 {
            os.write_int32(2, self.y)?;
        }
        if self.z != 0 {
            os.write_int32(3, self.z)?;
        }
        if self.block_id != 0 {
            os.write_int32(4, self.block_id)?;
        }
        if self.operation_id != 0 {
            os.write_uint32(5, self.operation_id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> PutBlock {
        PutBlock::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "x",
                |m: &PutBlock| { &m.x },
                |m: &mut PutBlock| { &mut m.x },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "y",
                |m: &PutBlock| { &m.y },
                |m: &mut PutBlock| { &mut m.y },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "z",
                |m: &PutBlock| { &m.z },
                |m: &mut PutBlock| { &mut m.z },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeInt32>(
                "block_id",
                |m: &PutBlock| { &m.block_id },
                |m: &mut PutBlock| { &mut m.block_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "operation_id",
                |m: &PutBlock| { &m.operation_id },
                |m: &mut PutBlock| { &mut m.operation_id },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<PutBlock>(
                "PutBlock",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static PutBlock {
        static instance: ::protobuf::rt::LazyV2<PutBlock> = ::protobuf::rt::LazyV2::INIT;
        instance.get(PutBlock::new)
    }
}

impl ::protobuf::Clear for PutBlock {
    fn clear(&mut self) {
        self.x = 0;
        self.y = 0;
        self.z = 0;
        self.block_id = 0;
        self.operation_id = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for PutBlock {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for PutBlock {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Cmd_PutBlockInPs {
    // message fields
    pub task_id: u32,
    pub put_block: ::protobuf::SingularPtrField<PutBlock>,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Cmd_PutBlockInPs {
    fn default() -> &'a Cmd_PutBlockInPs {
        <Cmd_PutBlockInPs as ::protobuf::Message>::default_instance()
    }
}

impl Cmd_PutBlockInPs {
    pub fn new() -> Cmd_PutBlockInPs {
        ::std::default::Default::default()
    }

    // uint32 task_id = 1;


    pub fn get_task_id(&self) -> u32 {
        self.task_id
    }
    pub fn clear_task_id(&mut self) {
        self.task_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_task_id(&mut self, v: u32) {
        self.task_id = v;
    }

    // .PutBlock put_block = 2;


    pub fn get_put_block(&self) -> &PutBlock {
        self.put_block.as_ref().unwrap_or_else(|| <PutBlock as ::protobuf::Message>::default_instance())
    }
    pub fn clear_put_block(&mut self) {
        self.put_block.clear();
    }

    pub fn has_put_block(&self) -> bool {
        self.put_block.is_some()
    }

    // Param is passed by value, moved
    pub fn set_put_block(&mut self, v: PutBlock) {
        self.put_block = ::protobuf::SingularPtrField::some(v);
    }

    // Mutable pointer to the field.
    // If field is not initialized, it is initialized with default value first.
    pub fn mut_put_block(&mut self) -> &mut PutBlock {
        if self.put_block.is_none() {
            self.put_block.set_default();
        }
        self.put_block.as_mut().unwrap()
    }

    // Take field
    pub fn take_put_block(&mut self) -> PutBlock {
        self.put_block.take().unwrap_or_else(|| PutBlock::new())
    }
}

impl ::protobuf::Message for Cmd_PutBlockInPs {
    fn is_initialized(&self) -> bool {
        for v in &self.put_block {
            if !v.is_initialized() {
                return false;
            }
        };
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.task_id = tmp;
                },
                2 => {
                    ::protobuf::rt::read_singular_message_into(wire_type, is, &mut self.put_block)?;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.task_id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.task_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if let Some(ref v) = self.put_block.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint32_size(len) + len;
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.task_id != 0 {
            os.write_uint32(1, self.task_id)?;
        }
        if let Some(ref v) = self.put_block.as_ref() {
            os.write_tag(2, ::protobuf::wire_format::WireTypeLengthDelimited)?;
            os.write_raw_varint32(v.get_cached_size())?;
            v.write_to_with_cached_sizes(os)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Cmd_PutBlockInPs {
        Cmd_PutBlockInPs::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "task_id",
                |m: &Cmd_PutBlockInPs| { &m.task_id },
                |m: &mut Cmd_PutBlockInPs| { &mut m.task_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_singular_ptr_field_accessor::<_, ::protobuf::types::ProtobufTypeMessage<PutBlock>>(
                "put_block",
                |m: &Cmd_PutBlockInPs| { &m.put_block },
                |m: &mut Cmd_PutBlockInPs| { &mut m.put_block },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Cmd_PutBlockInPs>(
                "Cmd_PutBlockInPs",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Cmd_PutBlockInPs {
        static instance: ::protobuf::rt::LazyV2<Cmd_PutBlockInPs> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Cmd_PutBlockInPs::new)
    }
}

impl ::protobuf::Clear for Cmd_PutBlockInPs {
    fn clear(&mut self) {
        self.task_id = 0;
        self.put_block.clear();
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Cmd_PutBlockInPs {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Cmd_PutBlockInPs {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct Rpl_PutBlockInPs {
    // message fields
    pub task_id: u32,
    pub put_succ: u32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a Rpl_PutBlockInPs {
    fn default() -> &'a Rpl_PutBlockInPs {
        <Rpl_PutBlockInPs as ::protobuf::Message>::default_instance()
    }
}

impl Rpl_PutBlockInPs {
    pub fn new() -> Rpl_PutBlockInPs {
        ::std::default::Default::default()
    }

    // uint32 task_id = 1;


    pub fn get_task_id(&self) -> u32 {
        self.task_id
    }
    pub fn clear_task_id(&mut self) {
        self.task_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_task_id(&mut self, v: u32) {
        self.task_id = v;
    }

    // uint32 put_succ = 2;


    pub fn get_put_succ(&self) -> u32 {
        self.put_succ
    }
    pub fn clear_put_succ(&mut self) {
        self.put_succ = 0;
    }

    // Param is passed by value, moved
    pub fn set_put_succ(&mut self, v: u32) {
        self.put_succ = v;
    }
}

impl ::protobuf::Message for Rpl_PutBlockInPs {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.task_id = tmp;
                },
                2 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.put_succ = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.task_id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.task_id, ::protobuf::wire_format::WireTypeVarint);
        }
        if self.put_succ != 0 {
            my_size += ::protobuf::rt::value_size(2, self.put_succ, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.task_id != 0 {
            os.write_uint32(1, self.task_id)?;
        }
        if self.put_succ != 0 {
            os.write_uint32(2, self.put_succ)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> Rpl_PutBlockInPs {
        Rpl_PutBlockInPs::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "task_id",
                |m: &Rpl_PutBlockInPs| { &m.task_id },
                |m: &mut Rpl_PutBlockInPs| { &mut m.task_id },
            ));
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "put_succ",
                |m: &Rpl_PutBlockInPs| { &m.put_succ },
                |m: &mut Rpl_PutBlockInPs| { &mut m.put_succ },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<Rpl_PutBlockInPs>(
                "Rpl_PutBlockInPs",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static Rpl_PutBlockInPs {
        static instance: ::protobuf::rt::LazyV2<Rpl_PutBlockInPs> = ::protobuf::rt::LazyV2::INIT;
        instance.get(Rpl_PutBlockInPs::new)
    }
}

impl ::protobuf::Clear for Rpl_PutBlockInPs {
    fn clear(&mut self) {
        self.task_id = 0;
        self.put_succ = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for Rpl_PutBlockInPs {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Rpl_PutBlockInPs {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ClientOperationFailed {
    // message fields
    pub operation_id: u32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ClientOperationFailed {
    fn default() -> &'a ClientOperationFailed {
        <ClientOperationFailed as ::protobuf::Message>::default_instance()
    }
}

impl ClientOperationFailed {
    pub fn new() -> ClientOperationFailed {
        ::std::default::Default::default()
    }

    // uint32 operation_id = 1;


    pub fn get_operation_id(&self) -> u32 {
        self.operation_id
    }
    pub fn clear_operation_id(&mut self) {
        self.operation_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_operation_id(&mut self, v: u32) {
        self.operation_id = v;
    }
}

impl ::protobuf::Message for ClientOperationFailed {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.operation_id = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.operation_id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.operation_id, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.operation_id != 0 {
            os.write_uint32(1, self.operation_id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ClientOperationFailed {
        ClientOperationFailed::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "operation_id",
                |m: &ClientOperationFailed| { &m.operation_id },
                |m: &mut ClientOperationFailed| { &mut m.operation_id },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ClientOperationFailed>(
                "ClientOperationFailed",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ClientOperationFailed {
        static instance: ::protobuf::rt::LazyV2<ClientOperationFailed> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ClientOperationFailed::new)
    }
}

impl ::protobuf::Clear for ClientOperationFailed {
    fn clear(&mut self) {
        self.operation_id = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ClientOperationFailed {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ClientOperationFailed {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(PartialEq,Clone,Default)]
pub struct ClientOperationSucc {
    // message fields
    pub operation_id: u32,
    // special fields
    pub unknown_fields: ::protobuf::UnknownFields,
    pub cached_size: ::protobuf::CachedSize,
}

impl<'a> ::std::default::Default for &'a ClientOperationSucc {
    fn default() -> &'a ClientOperationSucc {
        <ClientOperationSucc as ::protobuf::Message>::default_instance()
    }
}

impl ClientOperationSucc {
    pub fn new() -> ClientOperationSucc {
        ::std::default::Default::default()
    }

    // uint32 operation_id = 1;


    pub fn get_operation_id(&self) -> u32 {
        self.operation_id
    }
    pub fn clear_operation_id(&mut self) {
        self.operation_id = 0;
    }

    // Param is passed by value, moved
    pub fn set_operation_id(&mut self, v: u32) {
        self.operation_id = v;
    }
}

impl ::protobuf::Message for ClientOperationSucc {
    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        while !is.eof()? {
            let (field_number, wire_type) = is.read_tag_unpack()?;
            match field_number {
                1 => {
                    if wire_type != ::protobuf::wire_format::WireTypeVarint {
                        return ::std::result::Result::Err(::protobuf::rt::unexpected_wire_type(wire_type));
                    }
                    let tmp = is.read_uint32()?;
                    self.operation_id = tmp;
                },
                _ => {
                    ::protobuf::rt::read_unknown_or_skip_group(field_number, wire_type, is, self.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u32 {
        let mut my_size = 0;
        if self.operation_id != 0 {
            my_size += ::protobuf::rt::value_size(1, self.operation_id, ::protobuf::wire_format::WireTypeVarint);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.get_unknown_fields());
        self.cached_size.set(my_size);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::ProtobufResult<()> {
        if self.operation_id != 0 {
            os.write_uint32(1, self.operation_id)?;
        }
        os.write_unknown_fields(self.get_unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn get_cached_size(&self) -> u32 {
        self.cached_size.get()
    }

    fn get_unknown_fields(&self) -> &::protobuf::UnknownFields {
        &self.unknown_fields
    }

    fn mut_unknown_fields(&mut self) -> &mut ::protobuf::UnknownFields {
        &mut self.unknown_fields
    }

    fn as_any(&self) -> &dyn (::std::any::Any) {
        self as &dyn (::std::any::Any)
    }
    fn as_any_mut(&mut self) -> &mut dyn (::std::any::Any) {
        self as &mut dyn (::std::any::Any)
    }
    fn into_any(self: ::std::boxed::Box<Self>) -> ::std::boxed::Box<dyn (::std::any::Any)> {
        self
    }

    fn descriptor(&self) -> &'static ::protobuf::reflect::MessageDescriptor {
        Self::descriptor_static()
    }

    fn new() -> ClientOperationSucc {
        ClientOperationSucc::new()
    }

    fn descriptor_static() -> &'static ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            let mut fields = ::std::vec::Vec::new();
            fields.push(::protobuf::reflect::accessor::make_simple_field_accessor::<_, ::protobuf::types::ProtobufTypeUint32>(
                "operation_id",
                |m: &ClientOperationSucc| { &m.operation_id },
                |m: &mut ClientOperationSucc| { &mut m.operation_id },
            ));
            ::protobuf::reflect::MessageDescriptor::new_pb_name::<ClientOperationSucc>(
                "ClientOperationSucc",
                fields,
                file_descriptor_proto()
            )
        })
    }

    fn default_instance() -> &'static ClientOperationSucc {
        static instance: ::protobuf::rt::LazyV2<ClientOperationSucc> = ::protobuf::rt::LazyV2::INIT;
        instance.get(ClientOperationSucc::new)
    }
}

impl ::protobuf::Clear for ClientOperationSucc {
    fn clear(&mut self) {
        self.operation_id = 0;
        self.unknown_fields.clear();
    }
}

impl ::std::fmt::Debug for ClientOperationSucc {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ClientOperationSucc {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Message(self)
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum ClientType {
    ClientType_GameServer = 0,
    ClientType_Player = 1,
}

impl ::protobuf::ProtobufEnum for ClientType {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<ClientType> {
        match value {
            0 => ::std::option::Option::Some(ClientType::ClientType_GameServer),
            1 => ::std::option::Option::Some(ClientType::ClientType_Player),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [ClientType] = &[
            ClientType::ClientType_GameServer,
            ClientType::ClientType_Player,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<ClientType>("ClientType", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for ClientType {
}

impl ::std::default::Default for ClientType {
    fn default() -> Self {
        ClientType::ClientType_GameServer
    }
}

impl ::protobuf::reflect::ProtobufValue for ClientType {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

#[derive(Clone,PartialEq,Eq,Debug,Hash)]
pub enum EntityType {
    T_Null = 0,
    T_Player = 1,
}

impl ::protobuf::ProtobufEnum for EntityType {
    fn value(&self) -> i32 {
        *self as i32
    }

    fn from_i32(value: i32) -> ::std::option::Option<EntityType> {
        match value {
            0 => ::std::option::Option::Some(EntityType::T_Null),
            1 => ::std::option::Option::Some(EntityType::T_Player),
            _ => ::std::option::Option::None
        }
    }

    fn values() -> &'static [Self] {
        static values: &'static [EntityType] = &[
            EntityType::T_Null,
            EntityType::T_Player,
        ];
        values
    }

    fn enum_descriptor_static() -> &'static ::protobuf::reflect::EnumDescriptor {
        static descriptor: ::protobuf::rt::LazyV2<::protobuf::reflect::EnumDescriptor> = ::protobuf::rt::LazyV2::INIT;
        descriptor.get(|| {
            ::protobuf::reflect::EnumDescriptor::new_pb_name::<EntityType>("EntityType", file_descriptor_proto())
        })
    }
}

impl ::std::marker::Copy for EntityType {
}

impl ::std::default::Default for EntityType {
    fn default() -> Self {
        EntityType::T_Null
    }
}

impl ::protobuf::reflect::ProtobufValue for EntityType {
    fn as_ref(&self) -> ::protobuf::reflect::ReflectValueRef {
        ::protobuf::reflect::ReflectValueRef::Enum(::protobuf::ProtobufEnum::descriptor(self))
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\x0ccommon.proto\"F\n\x12ClientFirstConfirm\x12.\n\x0bclient_type\x18\
    \x01\x20\x01(\x0e2\x0b.ClientTypeR\nclientTypeB\0:\0\"\xfa\x01\n\tEntity\
    Pos\x12\x1b\n\x01t\x18\x01\x20\x01(\x0e2\x0b.EntityTypeR\x01tB\0\x12\x1d\
    \n\tentity_id\x18\x02\x20\x01(\rR\x08entityIdB\0\x12\x0e\n\x01x\x18\x03\
    \x20\x01(\x02R\x01xB\0\x12\x0e\n\x01y\x18\x04\x20\x01(\x02R\x01yB\0\x12\
    \x0e\n\x01z\x18\x05\x20\x01(\x02R\x01zB\0\x12\x17\n\x06r_roll\x18\x06\
    \x20\x01(\x02R\x05rRollB\0\x12\x15\n\x05r_yaw\x18\x07\x20\x01(\x02R\x04r\
    YawB\0\x12\x19\n\x07r_pitch\x18\x08\x20\x01(\x02R\x06rPitchB\0\x12\x10\n\
    \x02vx\x18\t\x20\x01(\x02R\x02vxB\0\x12\x10\n\x02vy\x18\n\x20\x01(\x02R\
    \x02vyB\0\x12\x10\n\x02vz\x18\x0b\x20\x01(\x02R\x02vzB\0:\0\".\n\x0bPlay\
    erBasic\x12\x1d\n\tentity_id\x18\x01\x20\x01(\rR\x08entityIdB\0:\0\"S\n\
    \tChunkPack\x12\x14\n\x04data\x18\x01\x20\x01(\x0cR\x04dataB\0\x12\x0e\n\
    \x01x\x18\x02\x20\x01(\x05R\x01xB\0\x12\x0e\n\x01y\x18\x03\x20\x01(\x05R\
    \x01yB\0\x12\x0e\n\x01z\x18\x04\x20\x01(\x05R\x01zB\0:\0\"p\n\x0fChunkEn\
    tityPack\x12+\n\nentity_pos\x18\x01\x20\x03(\x0b2\n.EntityPosR\tentityPo\
    sB\0\x12\x0e\n\x01x\x18\x02\x20\x01(\x05R\x01xB\0\x12\x0e\n\x01y\x18\x03\
    \x20\x01(\x05R\x01yB\0\x12\x0e\n\x01z\x18\x04\x20\x01(\x05R\x01zB\0:\0\"\
    \xbd\x01\n\x11MainPlayerMoveCmd\x12\x1d\n\tentity_id\x18\x01\x20\x01(\rR\
    \x08entityIdB\0\x12\x0e\n\x01x\x18\x02\x20\x01(\x02R\x01xB\0\x12\x0e\n\
    \x01y\x18\x03\x20\x01(\x02R\x01yB\0\x12#\n\x0crotate_pitch\x18\x04\x20\
    \x01(\x02R\x0brotatePitchB\0\x12\x1f\n\nrotate_yaw\x18\x05\x20\x01(\x02R\
    \trotateYawB\0\x12!\n\x0brotate_roll\x18\x06\x20\x01(\x02R\nrotateRollB\
    \0:\0\"_\n\x13Cmd_SpawnEntityInPs\x12\x19\n\x07task_id\x18\x01\x20\x01(\
    \rR\x06taskIdB\0\x12+\n\nentity_pos\x18\x02\x20\x01(\x0b2\n.EntityPosR\t\
    entityPosB\0:\0\"_\n\x13Rpl_SpawnEntityInPs\x12\x19\n\x07task_id\x18\x01\
    \x20\x01(\rR\x06taskIdB\0\x12+\n\nentity_pos\x18\x02\x20\x01(\x0b2\n.Ent\
    ityPosR\tentityPosB\0:\0\"@\n\x0fEntityPosUpdate\x12+\n\nentity_pos\x18\
    \x01\x20\x03(\x0b2\n.EntityPosR\tentityPosB\0:\0\"~\n\x08PutBlock\x12\
    \x0e\n\x01x\x18\x01\x20\x01(\x05R\x01xB\0\x12\x0e\n\x01y\x18\x02\x20\x01\
    (\x05R\x01yB\0\x12\x0e\n\x01z\x18\x03\x20\x01(\x05R\x01zB\0\x12\x1b\n\
    \x08block_id\x18\x04\x20\x01(\x05R\x07blockIdB\0\x12#\n\x0coperation_id\
    \x18\x05\x20\x01(\rR\x0boperationIdB\0:\0\"Y\n\x10Cmd_PutBlockInPs\x12\
    \x19\n\x07task_id\x18\x01\x20\x01(\rR\x06taskIdB\0\x12(\n\tput_block\x18\
    \x02\x20\x01(\x0b2\t.PutBlockR\x08putBlockB\0:\0\"L\n\x10Rpl_PutBlockInP\
    s\x12\x19\n\x07task_id\x18\x01\x20\x01(\rR\x06taskIdB\0\x12\x1b\n\x08put\
    _succ\x18\x02\x20\x01(\rR\x07putSuccB\0:\0\">\n\x15ClientOperationFailed\
    \x12#\n\x0coperation_id\x18\x01\x20\x01(\rR\x0boperationIdB\0:\0\"<\n\
    \x13ClientOperationSucc\x12#\n\x0coperation_id\x18\x01\x20\x01(\rR\x0bop\
    erationIdB\0:\0*@\n\nClientType\x12\x19\n\x15ClientType_GameServer\x10\0\
    \x12\x15\n\x11ClientType_Player\x10\x01\x1a\0*(\n\nEntityType\x12\n\n\
    \x06T_Null\x10\0\x12\x0c\n\x08T_Player\x10\x01\x1a\0B\0b\x06proto3\
";

static file_descriptor_proto_lazy: ::protobuf::rt::LazyV2<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::LazyV2::INIT;

fn parse_descriptor_proto() -> ::protobuf::descriptor::FileDescriptorProto {
    ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
}

pub fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    file_descriptor_proto_lazy.get(|| {
        parse_descriptor_proto()
    })
}
