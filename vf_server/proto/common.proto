syntax = "proto3";

//架构层
enum ClientType{
  ClientType_GameServer=0;
  ClientType_Player=1;
}
message ClientFirstConfirm{
  ClientType client_type=1;
}


//游戏层
enum EntityType {
  T_Null = 0;
  T_Player = 1;
}

message EntityPos{
  EntityType t = 1;
  uint32 entity_id = 2;

  float x = 3;
  float y = 4;
  float z = 5;

  float r_roll=6;
  float r_yaw=7;
  float r_pitch=8;

  float vx=9;
  float vy=10;
  float vz=11;
}

//首次进入游戏
message PlayerBasic{
  uint32 entity_id = 1;
}

message ChunkPack{
  bytes data = 1;
  int32 x = 2;
  int32 y = 3;
  int32 z = 4;
}

message ChunkEntityPack{
  repeated EntityPos entity_pos=1;
  int32 x = 2;
  int32 y = 3;
  int32 z = 4;
}

message MainPlayerMoveCmd{
  uint32 entity_id=   1;//作用是转发到partserver的时候可以找到对应的实体
  float move_forward= 2;
  float move_right=   3;
  float rotate_yaw=   4;//左右转
}
message MainPlayerJumpCmd{
  uint32 start_or_end=1;
  uint32 entity_id=   2;//作用是转发到partserver的时候可以找到对应的实体
}
//rc->ps
message Cmd_SpawnEntityInPs{
  uint32 task_id=1;
  EntityPos entity_pos=2;
}

//ps->rc
message Rpl_SpawnEntityInPs{
  uint32 task_id=1;
  EntityPos entity_pos=2;
}

//ps->all
message EntityPosUpdate{
  repeated EntityPos entity_pos=1;
}

message PutBlock{
  int32 x=1;
  int32 y=2;
  int32 z=3;
  int32 block_id=4;
  uint32 operation_id=5;
}

message Cmd_PutBlockInPs{
  uint32 task_id=1;
  PutBlock put_block=2;
}

message Rpl_PutBlockInPs{
  uint32 task_id=1;
  uint32 put_succ=2;//0:fail 1:succ
}

message ClientOperationFailed{
  uint32 operation_id=1;
}

message ClientOperationSucc{
  uint32 operation_id=1;
}

enum RemoveEntityType{
  killed=0;
  disco=1;
  clear=2;
}
message RemoveEntity{
  RemoveEntityType remove_type=1;
  uint32 entity_id=2;
}